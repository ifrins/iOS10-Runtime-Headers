/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTCellFormatAndValue : NSObject <NSCopying, TSSPropertyCommandSerializing, TSTCellDiffing> {
    bool  mApplySpareFormatOnly;
    TSUFormatObject * mBaseFormat;
    TSUFormatObject * mCurrencyFormat;
    int  mCurrentFormatType;
    TSUFormatObject * mCustomFormat;
    TSUFormatObject * mDateFormat;
    TSUFormatObject * mDurationFormat;
    int  mExplicitFlags;
    TSWPStorage * mFormattedRichTextStorage;
    NSString * mFormattedValue;
    TSUFormatObject * mMultipleChoiceFormat;
    TSUFormatObject * mNumberFormat;
    int  mSpareFormatType;
    TSUFormatObject * mStepperSliderFormat;
    bool  mSuppressApplyValue;
    bool  mUseAllSpareFormats;
    /* Warning: unhandled union encoding: '(?="mDouble"d"mBool"B"mDate"@"NSDate""mString"@"NSString""mStorage"@"TSWPStorage")' */ union { 
        double mDouble; 
        bool mBool; 
        NSDate *mDate; 
        NSString *mString; 
        id mStorage; 
    }  mValue;
    unsigned int  mValueType;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)cellDiffProperties;
+ (id)formatAndValueForCoercingControlCellToNonControlType:(id)arg1;
+ (id)formatAndValueFromCell:(id)arg1 applySpareFormatOnly:(int)arg2;
+ (id)formatAndValueFromCell:(id)arg1 useAllSpareFormats:(bool)arg2;
+ (id)formatAndValueFromCell:(id)arg1 useAllSpareFormats:(bool)arg2 forceNoContent:(bool)arg3;
+ (id)formatAndValueFromRichTextCell:(id)arg1 updatingStorageWithBlock:(id /* block */)arg2;

- (void)applyToCell:(id)arg1;
- (id)copyForApplyingNoContent;
- (id)copyForApplyingNoContentWithSuppressApplyValue:(bool)arg1;
- (id)copyForNotApplyingValue;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; struct { unsigned int x_4_3_1 : 1; int x_4_3_2; int x_4_3_3; int x_4_3_4; } x_4_2_4; struct { id x_5_3_1; unsigned int x_5_3_2; unsigned char x_5_3_3; } x_4_2_5; struct { double x_6_3_1; double x_6_3_2; double x_6_3_3; int x_6_3_4; unsigned int x_6_3_5 : 2; unsigned int x_6_3_6 : 2; } x_4_2_6; struct { int x_7_3_1; unsigned int x_7_3_2; id x_7_3_3; /* Warning: Unrecognized filer type: ')' using 'void*' */ void*x_7_3_4; } x_4_2_7; void*x_4_2_8; void*x_4_2_9; void*x_4_2_10; void*x_4_2_11; void*x_4_2_12; void*x_4_2_13; void*x_4_2_14; void*x_4_2_15; void*x_4_2_16; void*x_4_2_17; void*x_4_2_18; void*x_4_2_19; void*x_4_2_20; long doublex_4_2_21; void*x_4_2_22; void*x_4_2_23; void*x_4_2_24; void*x_4_2_25; void*x_4_2_26; void*x_4_2_27; void*x_4_2_28; void*x_4_2_29; void*x_4_2_30; void*x_4_2_31; void*x_4_2_32; void*x_4_2_33; void*x_4_2_34; void*x_4_2_35; unsigned short x_4_2_36; void*x_4_2_37; int x_4_2_38; void*x_4_2_39; void*x_4_2_40; void*x_4_2_41; void*x_4_2_42; void*x_4_2_43; void*x_4_2_44; void*x_4_2_45; struct x_4_2_46; void*x_4_2_47; void*x_4_2_48; void*x_4_2_49; double x_4_2_50; void*x_4_2_51; out void*x_4_2_52; void*x_4_2_53; void*x_4_2_54; unsigned int x_4_2_55/* : ? */; void*x_4_2_56; long x_4_2_57; void*x_4_2_58; void*x_4_2_59; void*x_4_2_60; void*x_4_2_61; void*x_4_2_62; void*x_4_2_63; void*x_4_2_64; void*x_4_2_65; void*x_4_2_66; void*x_4_2_67; void*x_4_2_68; void*x_4_2_69; void*x_4_2_70; void*x_4_2_71; void*x_4_2_72; void*x_4_2_73; void*x_4_2_74; void*x_4_2_75; void*x_4_2_76; void*x_4_2_77; void*x_4_2_78; void*x_4_2_79; void*x_4_2_80; double x_4_2_81; void*x_4_2_82; out void*x_4_2_83; void*x_4_2_84; void*x_4_2_85; unsigned int x_4_2_86/* : ? */; void*x_4_2_87; long x_4_2_88; void*x_4_2_89; void*x_4_2_90; void*x_4_2_91; void*x_4_2_92; void*x_4_2_93; void*x_4_2_94; void*x_4_2_95; void*x_4_2_96; void*x_4_2_97; void*x_4_2_98; void*x_4_2_99; void*x_4_2_100; void*x_4_2_101; void*x_4_2_102; void*x_4_2_103; void*x_4_2_104; void*x_4_2_105; void*x_4_2_106; void*x_4_2_107; void*x_4_2_108; void*x_4_2_109; void*x_4_2_110; void*x_4_2_111; } x_2_1_4; void*x_2_1_5; void*x_2_1_6; void*x_2_1_7; void*x_2_1_8; void*x_2_1_9; void*x_2_1_10; void*x_2_1_11; void*x_2_1_12; void*x_2_1_13; void*x_2_1_14; void*x_2_1_15; void*x_2_1_16; void*x_2_1_17; void*x_2_1_18; void*x_2_1_19; id x_2_1_20; void*x_2_1_21; void*x_2_1_22; const void*x_2_1_23; out void*x_2_1_24; void*x_2_1_25; void*x_2_1_26; void*x_2_1_27; void*x_2_1_28; const void*x_2_1_29; void*x_2_1_30; void*x_2_1_31; void*x_2_1_32; void*x_2_1_33; void*x_2_1_34; void*x_2_1_35; union x_2_1_36; void*x_2_1_37; const void*x_2_1_38; void*x_2_1_39; void*x_2_1_40; void*x_2_1_41; void*x_2_1_42; double x_2_1_43; void*x_2_1_44; out void*x_2_1_45; in void*x_2_1_46; long x_2_1_47; void*x_2_1_48; void*x_2_1_49; void*x_2_1_50; void*x_2_1_51; void*x_2_1_52; void*x_2_1_53; void*x_2_1_54; BOOL x_2_1_55; void*x_2_1_56; out void*x_2_1_57; void*x_2_1_58; void*x_2_1_59; void*x_2_1_60; void*x_2_1_61; } x2; void*x3; void*x4; void*x5; inout void*x6; unsigned short x7; void*x8; unsigned short x9; void*x10; void*x11; void*x12; const void*x13; int x14; void*x15; in void*x16; void*x17; void*x18; void*x19; void*x20; char *x21; void*x22; double x23; void*x24; void*x25; void*x26; unsigned int x27/* : ? */; void*x28; void*x29; void*x30; void*x31; void*x32; long doublex33; void*x34; void*x35; void*x36; short x37; void*x38; BOOL x39; void*x40; const void*x41; int x42; void*x43; void*x44; void*x45; void*x46; void*x47; int x48; void*x49; out void*x50; in void*x51; void*x52; void*x53; })getCurrentFormat;
- (bool)hasStringContentMatchingCell:(id)arg1;
- (id)initFromCell:(id)arg1 useAllSpareFormats:(bool)arg2;
- (id)initFromCell:(id)arg1 useAllSpareFormats:(bool)arg2 forceNoContent:(bool)arg3 applySpareFormatOnly:(int)arg4;
- (id)initFromPropertyCommandMessage:(const struct Message { int (**x1)(); }*)arg1 unarchiver:(id)arg2;
- (bool)isControl;
- (bool)isFormulaSyntaxError;
- (id)objectByRemovingPropertiesInMap:(id)arg1 addingPropertiesInMap:(id)arg2 updateInverseResetPropertyMap:(id)arg3 updateInverseSetPropertyMap:(id)arg4;
- (id*)p_formatObjectForFormatType:(int)arg1;
- (id)p_sikritCopyStorage:(id)arg1;
- (void)saveToPropertyCommandMessage:(struct Message { int (**x1)(); }*)arg1 archiver:(id)arg2;
- (int)valueType;

@end
