/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSPDatabase : TSUDatabase {
    bool  _incrementalVacuum;
    struct sqlite3_stmt { } * _insertDataStateStatement;
    struct sqlite3_stmt { } * _insertObjectStatement;
    struct sqlite3_stmt { } * _insertRelationshipStatement;
    NSURL * _packageURL;
    struct sqlite3_stmt { } * _relationshipTargetsStatement;
    struct sqlite3_stmt { } * _updateDataStateStatement;
}

- (void).cxx_destruct;
- (bool)closeWithError:(id*)arg1;
- (bool)documentVersion:(struct { unsigned long long x1; unsigned long long x2; }*)arg1 closedCleanlyToken:(long long*)arg2 error:(id*)arg3;
- (bool)documentVersion:(unsigned long long*)arg1 error:(id*)arg2;
- (struct set<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree_node<long long, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)filterIdentifiers:(const struct set<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree_node<long long, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 error:(id*)arg2;
- (id)init;
- (id)initReadonlyWithPath:(id)arg1 error:(id*)arg2;
- (id)initWithPath:(id)arg1 error:(id*)arg2;
- (bool)insertDataStateWithSize:(int)arg1 identifier:(long long*)arg2 error:(id*)arg3;
- (bool)insertObjectWithIdentifier:(long long)arg1 stateIdentifier:(const struct ObjectStateIdentifier { bool x1; long long x2; bool x3; id x4; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x5; void*x6; void*x7; void*x8; long doublex9; void*x10; void*x11; void*x12; void*x13; void*x14; bycopy double x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; bool x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; id x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; long doublex55; void*x56; void*x57; void*x58; void*x59; void*x60; }*)arg2 classType:(int)arg3 error:(id*)arg4;
- (bool)insertRelationshipWithSourceIdentifier:(long long)arg1 targetIdentifier:(long long)arg2 error:(id*)arg3;
- (bool)lastObjectIdentifier:(long long*)arg1 error:(id*)arg2;
- (bool)needsUpgradeFromSchemaVersion:(int)arg1;
- (struct set<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree_node<long long, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)newRelationshipTargetsForSourceIdentifier:(long long)arg1 error:(id*)arg2;
- (bool)numberOfDatabaseObjects:(unsigned long long*)arg1 error:(id*)arg2;
- (id)objectFromStatement:(struct sqlite3_stmt { }*)arg1;
- (struct sqlite3_blob { }*)openBlobForObject:(id)arg1 error:(id*)arg2;
- (struct sqlite3_blob { }*)openDataStateBlobWithIdentifier:(long long)arg1 error:(id*)arg2;
- (struct sqlite3_blob { }*)openDataStateBlobWithIdentifier:(long long)arg1 willWrite:(bool)arg2 error:(id*)arg3;
- (bool)parseArchive:(struct Message { int (**x1)(); }*)arg1 forObject:(id)arg2 error:(id*)arg3;
- (id)queryFirstObjectWithStatement:(struct sqlite3_stmt { }*)arg1 error:(id*)arg2;
- (id)queryObjectWithIdentifier:(long long)arg1 error:(id*)arg2;
- (bool)setClosedCleanlyToken:(long long)arg1 error:(id*)arg2;
- (bool)setDocumentVersion:(struct { unsigned long long x1; unsigned long long x2; })arg1 error:(id*)arg2;
- (bool)updateDataStateWithIdentifier:(long long)arg1 size:(int)arg2 error:(id*)arg3;
- (bool)upgradeFromSchemaVersion:(int)arg1 error:(id*)arg2;

@end
