/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCEUUidReferenceMap : NSObject {
    struct unordered_map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> >, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > > > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *> > { 
                            unsigned long long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, std::__1::hash<TSUUUID>, true> > { 
                unsigned long long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _cellRefsByUuid;
    struct unordered_map<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<std::__1::pair<const TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > > > > { 
        struct __hash_table<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::__unordered_map_hasher<TSCEInternalCellReference, std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::hash<TSCEInternalCellReference>, true>, std::__1::__unordered_map_equal<TSCEInternalCellReference, std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::equal_to<TSCEInternalCellReference>, true>, std::__1::allocator<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > > > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> > { 
                            unsigned long long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSCEInternalCellReference, std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::hash<TSCEInternalCellReference>, true> > { 
                unsigned long long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<TSCEInternalCellReference, std::__1::__hash_value_type<TSCEInternalCellReference, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::equal_to<TSCEInternalCellReference>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _uuidsByCellRef;
}

+ (id)_stringForInternalCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; unsigned short x2; unsigned short x3; }*)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addCellRef:(const struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1 dependencyTracker:(struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x3; in out const double x4; void*x5; const void*x6; double x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; unsigned short x14; void*x15; SEL x16; SEL x17; void*x18; void*x19; unsigned int x20; long doublex21; long doublex22; void*x23; void*x24; void*x25; void*x26; void*x27; unsigned short x28; void*x29; SEL x30; SEL x31; void*x32; void*x33; unsigned int x34; long doublex35; long doublex36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; unsigned short x44; unsigned char x45; void*x46; long doublex47; void*x48; void*x49; void*x50; in double x51; void*x52; in BOOL x53; void*x54; void*x55; const void*x56; BOOL x57; void*x58; void*x59; const void*x60; out const void*x61; void*x62; long x63; void*x64; bycopy void*x65; in void*x66; const unsigned int x67; in float x68; out void*x69; void*x70; short x71; void*x72; double x73; SEL x74; SEL x75; void*x76; void*x77; void*x78; SEL x79; SEL x80; void*x81; void*x82; short x83; void*x84; void*x85; void*x86; unsigned short x87; void*x88; void*x89; void*x90; unsigned int x91; long doublex92; void*x93; void*x94; void*x95; short x96; void*x97; double x98; SEL x99; SEL x100; void*x101; void*x102; void*x103; SEL x104; SEL x105; void*x106; long long x107; void*x108; void*x109; long x110; void*x111; void*x112; out void*x113; void*x114; unsigned short x115; void*x116; SEL x117; SEL x118; void*x119; void*x120; unsigned int x121; long doublex122; long doublex123; void*x124; void*x125; void*x126; void*x127; void*x128; unsigned short x129; void*x130; SEL x131; SEL x132; void*x133; void*x134; unsigned int x135; long doublex136; long doublex137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; double x148; SEL x149; SEL x150; void*x151; void*x152; void*x153; SEL x154; SEL x155; void*x156; long x157; long x158; out BOOL x159; void*x160; void*x161; out const void*x162; short x163; void*x164; double x165; SEL x166; SEL x167; void*x168; void*x169; void*x170; SEL x171; SEL x172; void*x173; void*x174; int x175; const void*x176; BOOL x177; out in short x178; void*x179; void*x180; void*x181; unsigned short x182; void*x183; SEL x184; SEL x185; void*x186; void*x187; unsigned int x188; long doublex189; long doublex190; void*x191; void*x192; void*x193; void*x194; void*x195; unsigned short x196; void*x197; SEL x198; SEL x199; void*x200; void*x201; unsigned int x202; long doublex203; long doublex204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; unsigned char x213; void*x214; long doublex215; void*x216; void*x217; void*x218; in double x219; void*x220; in BOOL x221; void*x222; void*x223; const void*x224; BOOL x225; void*x226; void*x227; const void*x228; out const void*x229; void*x230; long x231; void*x232; bycopy void*x233; in void*x234; const unsigned int x235; in float x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_243_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_3_1; } x_2_2_1; } x_243_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_2_1; } x_243_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_243_1_4; } x243; }*)arg2 forUuid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg3;
- (void)addCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; unsigned short x2; unsigned short x3; }*)arg1 forUuid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg2;
- (id)description;
- (void)encodeToArchive:(struct UuidReferenceMapArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct RepeatedPtrField<TSCE::UuidReferenceMapArchive_CellRefsForUuid> { void **x_5_1_1; int x_5_1_2; int x_5_1_3; int x_5_1_4; } x5; }*)arg1;
- (void)getCellRefs:(struct unordered_set<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct __hash_table<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct unique_ptr<std::__1::__hash_node<TSCECellReference, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSCECellReference, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __hash_node<TSCECellReference, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *> { struct __hash_node<TSCECellReference, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, TSCECellReferenceHash> { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, TSCECellReferenceEqual> { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 dependencyTracker:(struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x3; in out const double x4; void*x5; const void*x6; double x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; unsigned short x14; void*x15; SEL x16; SEL x17; void*x18; void*x19; unsigned int x20; long doublex21; long doublex22; void*x23; void*x24; void*x25; void*x26; void*x27; unsigned short x28; void*x29; SEL x30; SEL x31; void*x32; void*x33; unsigned int x34; long doublex35; long doublex36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; unsigned short x44; unsigned char x45; void*x46; long doublex47; void*x48; void*x49; void*x50; in double x51; void*x52; in BOOL x53; void*x54; void*x55; const void*x56; BOOL x57; void*x58; void*x59; const void*x60; out const void*x61; void*x62; long x63; void*x64; bycopy void*x65; in void*x66; const unsigned int x67; in float x68; out void*x69; void*x70; short x71; void*x72; double x73; SEL x74; SEL x75; void*x76; void*x77; void*x78; SEL x79; SEL x80; void*x81; void*x82; short x83; void*x84; void*x85; void*x86; unsigned short x87; void*x88; void*x89; void*x90; unsigned int x91; long doublex92; void*x93; void*x94; void*x95; short x96; void*x97; double x98; SEL x99; SEL x100; void*x101; void*x102; void*x103; SEL x104; SEL x105; void*x106; long long x107; void*x108; void*x109; long x110; void*x111; void*x112; out void*x113; void*x114; unsigned short x115; void*x116; SEL x117; SEL x118; void*x119; void*x120; unsigned int x121; long doublex122; long doublex123; void*x124; void*x125; void*x126; void*x127; void*x128; unsigned short x129; void*x130; SEL x131; SEL x132; void*x133; void*x134; unsigned int x135; long doublex136; long doublex137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; double x148; SEL x149; SEL x150; void*x151; void*x152; void*x153; SEL x154; SEL x155; void*x156; long x157; long x158; out BOOL x159; void*x160; void*x161; out const void*x162; short x163; void*x164; double x165; SEL x166; SEL x167; void*x168; void*x169; void*x170; SEL x171; SEL x172; void*x173; void*x174; int x175; const void*x176; BOOL x177; out in short x178; void*x179; void*x180; void*x181; unsigned short x182; void*x183; SEL x184; SEL x185; void*x186; void*x187; unsigned int x188; long doublex189; long doublex190; void*x191; void*x192; void*x193; void*x194; void*x195; unsigned short x196; void*x197; SEL x198; SEL x199; void*x200; void*x201; unsigned int x202; long doublex203; long doublex204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; unsigned char x213; void*x214; long doublex215; void*x216; void*x217; void*x218; in double x219; void*x220; in BOOL x221; void*x222; void*x223; const void*x224; BOOL x225; void*x226; void*x227; const void*x228; out const void*x229; void*x230; long x231; void*x232; bycopy void*x233; in void*x234; const unsigned int x235; in float x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_243_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_3_1; } x_2_2_1; } x_243_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_2_1; } x_243_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_243_1_4; } x243; }*)arg2 referringToUuid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg3;
- (void)getCellRefs:(struct unordered_set<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct __hash_table<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct unique_ptr<std::__1::__hash_node<TSCECellReference, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSCECellReference, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __hash_node<TSCECellReference, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *> { struct __hash_node<TSCECellReference, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, TSCECellReferenceHash> { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, TSCECellReferenceEqual> { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 dependencyTracker:(struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x3; in out const double x4; void*x5; const void*x6; double x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; unsigned short x14; void*x15; SEL x16; SEL x17; void*x18; void*x19; unsigned int x20; long doublex21; long doublex22; void*x23; void*x24; void*x25; void*x26; void*x27; unsigned short x28; void*x29; SEL x30; SEL x31; void*x32; void*x33; unsigned int x34; long doublex35; long doublex36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; unsigned short x44; unsigned char x45; void*x46; long doublex47; void*x48; void*x49; void*x50; in double x51; void*x52; in BOOL x53; void*x54; void*x55; const void*x56; BOOL x57; void*x58; void*x59; const void*x60; out const void*x61; void*x62; long x63; void*x64; bycopy void*x65; in void*x66; const unsigned int x67; in float x68; out void*x69; void*x70; short x71; void*x72; double x73; SEL x74; SEL x75; void*x76; void*x77; void*x78; SEL x79; SEL x80; void*x81; void*x82; short x83; void*x84; void*x85; void*x86; unsigned short x87; void*x88; void*x89; void*x90; unsigned int x91; long doublex92; void*x93; void*x94; void*x95; short x96; void*x97; double x98; SEL x99; SEL x100; void*x101; void*x102; void*x103; SEL x104; SEL x105; void*x106; long long x107; void*x108; void*x109; long x110; void*x111; void*x112; out void*x113; void*x114; unsigned short x115; void*x116; SEL x117; SEL x118; void*x119; void*x120; unsigned int x121; long doublex122; long doublex123; void*x124; void*x125; void*x126; void*x127; void*x128; unsigned short x129; void*x130; SEL x131; SEL x132; void*x133; void*x134; unsigned int x135; long doublex136; long doublex137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; double x148; SEL x149; SEL x150; void*x151; void*x152; void*x153; SEL x154; SEL x155; void*x156; long x157; long x158; out BOOL x159; void*x160; void*x161; out const void*x162; short x163; void*x164; double x165; SEL x166; SEL x167; void*x168; void*x169; void*x170; SEL x171; SEL x172; void*x173; void*x174; int x175; const void*x176; BOOL x177; out in short x178; void*x179; void*x180; void*x181; unsigned short x182; void*x183; SEL x184; SEL x185; void*x186; void*x187; unsigned int x188; long doublex189; long doublex190; void*x191; void*x192; void*x193; void*x194; void*x195; unsigned short x196; void*x197; SEL x198; SEL x199; void*x200; void*x201; unsigned int x202; long doublex203; long doublex204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; unsigned char x213; void*x214; long doublex215; void*x216; void*x217; void*x218; in double x219; void*x220; in BOOL x221; void*x222; void*x223; const void*x224; BOOL x225; void*x226; void*x227; const void*x228; out const void*x229; void*x230; long x231; void*x232; bycopy void*x233; in void*x234; const unsigned int x235; in float x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_243_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_3_1; } x_2_2_1; } x_243_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_2_1; } x_243_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_243_1_4; } x243; }*)arg2 referringToUuids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg3;
- (id)init;
- (id)initFromArchive:(const struct UuidReferenceMapArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct RepeatedPtrField<TSCE::UuidReferenceMapArchive_CellRefsForUuid> { void **x_5_1_1; int x_5_1_2; int x_5_1_3; int x_5_1_4; } x5; }*)arg1 dependencyTracker:(struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x3; in out const double x4; void*x5; const void*x6; double x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; unsigned short x14; void*x15; SEL x16; SEL x17; void*x18; void*x19; unsigned int x20; long doublex21; long doublex22; void*x23; void*x24; void*x25; void*x26; void*x27; unsigned short x28; void*x29; SEL x30; SEL x31; void*x32; void*x33; unsigned int x34; long doublex35; long doublex36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; unsigned short x44; unsigned char x45; void*x46; long doublex47; void*x48; void*x49; void*x50; in double x51; void*x52; in BOOL x53; void*x54; void*x55; const void*x56; BOOL x57; void*x58; void*x59; const void*x60; out const void*x61; void*x62; long x63; void*x64; bycopy void*x65; in void*x66; const unsigned int x67; in float x68; out void*x69; void*x70; short x71; void*x72; double x73; SEL x74; SEL x75; void*x76; void*x77; void*x78; SEL x79; SEL x80; void*x81; void*x82; short x83; void*x84; void*x85; void*x86; unsigned short x87; void*x88; void*x89; void*x90; unsigned int x91; long doublex92; void*x93; void*x94; void*x95; short x96; void*x97; double x98; SEL x99; SEL x100; void*x101; void*x102; void*x103; SEL x104; SEL x105; void*x106; long long x107; void*x108; void*x109; long x110; void*x111; void*x112; out void*x113; void*x114; unsigned short x115; void*x116; SEL x117; SEL x118; void*x119; void*x120; unsigned int x121; long doublex122; long doublex123; void*x124; void*x125; void*x126; void*x127; void*x128; unsigned short x129; void*x130; SEL x131; SEL x132; void*x133; void*x134; unsigned int x135; long doublex136; long doublex137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; double x148; SEL x149; SEL x150; void*x151; void*x152; void*x153; SEL x154; SEL x155; void*x156; long x157; long x158; out BOOL x159; void*x160; void*x161; out const void*x162; short x163; void*x164; double x165; SEL x166; SEL x167; void*x168; void*x169; void*x170; SEL x171; SEL x172; void*x173; void*x174; int x175; const void*x176; BOOL x177; out in short x178; void*x179; void*x180; void*x181; unsigned short x182; void*x183; SEL x184; SEL x185; void*x186; void*x187; unsigned int x188; long doublex189; long doublex190; void*x191; void*x192; void*x193; void*x194; void*x195; unsigned short x196; void*x197; SEL x198; SEL x199; void*x200; void*x201; unsigned int x202; long doublex203; long doublex204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; unsigned char x213; void*x214; long doublex215; void*x216; void*x217; void*x218; in double x219; void*x220; in BOOL x221; void*x222; void*x223; const void*x224; BOOL x225; void*x226; void*x227; const void*x228; out const void*x229; void*x230; long x231; void*x232; bycopy void*x233; in void*x234; const unsigned int x235; in float x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_243_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_3_1; } x_2_2_1; } x_243_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_2_1; } x_243_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_243_1_4; } x243; }*)arg2;
- (void)p_getCellRefs:(struct unordered_set<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > { struct __hash_table<TSCEInternalCellReference, std::__1::hash<TSCEInternalCellReference>, std::__1::equal_to<TSCEInternalCellReference>, std::__1::allocator<TSCEInternalCellReference> > { struct unique_ptr<std::__1::__hash_node<TSCEInternalCellReference, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCEInternalCellReference, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSCEInternalCellReference, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCEInternalCellReference, void *> *> > > { struct __hash_node<TSCEInternalCellReference, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCEInternalCellReference, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSCEInternalCellReference, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEInternalCellReference, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEInternalCellReference, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSCEInternalCellReference, void *> *> { struct __hash_node<TSCEInternalCellReference, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<TSCEInternalCellReference> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<TSCEInternalCellReference> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 referringToUuids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2;
- (void)removeCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; unsigned short x2; unsigned short x3; }*)arg1;
- (void)removeCellRef:(const struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1 dependencyTracker:(struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x3; in out const double x4; void*x5; const void*x6; double x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; unsigned short x14; void*x15; SEL x16; SEL x17; void*x18; void*x19; unsigned int x20; long doublex21; long doublex22; void*x23; void*x24; void*x25; void*x26; void*x27; unsigned short x28; void*x29; SEL x30; SEL x31; void*x32; void*x33; unsigned int x34; long doublex35; long doublex36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; unsigned short x44; unsigned char x45; void*x46; long doublex47; void*x48; void*x49; void*x50; in double x51; void*x52; in BOOL x53; void*x54; void*x55; const void*x56; BOOL x57; void*x58; void*x59; const void*x60; out const void*x61; void*x62; long x63; void*x64; bycopy void*x65; in void*x66; const unsigned int x67; in float x68; out void*x69; void*x70; short x71; void*x72; double x73; SEL x74; SEL x75; void*x76; void*x77; void*x78; SEL x79; SEL x80; void*x81; void*x82; short x83; void*x84; void*x85; void*x86; unsigned short x87; void*x88; void*x89; void*x90; unsigned int x91; long doublex92; void*x93; void*x94; void*x95; short x96; void*x97; double x98; SEL x99; SEL x100; void*x101; void*x102; void*x103; SEL x104; SEL x105; void*x106; long long x107; void*x108; void*x109; long x110; void*x111; void*x112; out void*x113; void*x114; unsigned short x115; void*x116; SEL x117; SEL x118; void*x119; void*x120; unsigned int x121; long doublex122; long doublex123; void*x124; void*x125; void*x126; void*x127; void*x128; unsigned short x129; void*x130; SEL x131; SEL x132; void*x133; void*x134; unsigned int x135; long doublex136; long doublex137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; double x148; SEL x149; SEL x150; void*x151; void*x152; void*x153; SEL x154; SEL x155; void*x156; long x157; long x158; out BOOL x159; void*x160; void*x161; out const void*x162; short x163; void*x164; double x165; SEL x166; SEL x167; void*x168; void*x169; void*x170; SEL x171; SEL x172; void*x173; void*x174; int x175; const void*x176; BOOL x177; out in short x178; void*x179; void*x180; void*x181; unsigned short x182; void*x183; SEL x184; SEL x185; void*x186; void*x187; unsigned int x188; long doublex189; long doublex190; void*x191; void*x192; void*x193; void*x194; void*x195; unsigned short x196; void*x197; SEL x198; SEL x199; void*x200; void*x201; unsigned int x202; long doublex203; long doublex204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; unsigned char x213; void*x214; long doublex215; void*x216; void*x217; void*x218; in double x219; void*x220; in BOOL x221; void*x222; void*x223; const void*x224; BOOL x225; void*x226; void*x227; const void*x228; out const void*x229; void*x230; long x231; void*x232; bycopy void*x233; in void*x234; const unsigned int x235; in float x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_243_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_3_1; } x_2_2_1; } x_243_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_2_1; } x_243_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_243_1_4; } x243; }*)arg2 forUuid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg3;
- (void)removeCellRef:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; unsigned short x2; unsigned short x3; }*)arg1 forUuid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg2;

@end
