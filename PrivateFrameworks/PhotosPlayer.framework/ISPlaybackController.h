/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosPlayer.framework/PhotosPlayer
 */

@interface ISPlaybackController : NSObject <ISAVPlayerControllerDelegate, ISPlaybackStateTransitionManagerDelegate> {
    ISAVPlayerController * __avPlayerController;
    double  __crossfadePlaybackStartTime;
    long long  __currentPlaybackID;
    long long  __currentTransitionRequestID;
    long long  __hasStartedVideoForCurrentPlayback;
    double  __lastHintProgress;
    NSHashTable * __outputs;
    ISReuseQueue * __playerReuseQueue;
    long long  __previousPlaybackState;
    ISPlaybackStateTransitionManager * __transitionManager;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  __videoDuration;
    double  __videoPlaybackRequestTime;
    id  __videoPlayerPerformanceDiagnosticsTimeObserver;
    bool  _applyScaleToVideo;
    double  _crossfadeDuration;
    float  _hintProgress;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _idleTime;
    double  _maximumVideoTransitionDelay;
    NSObject<OS_dispatch_queue> * _observerQueue;
    NSHashTable * _observers;
    float  _playRate;
    id /* block */  _playbackEndHandler;
    ISPlaybackSpec * _playbackSpec;
    long long  _playbackState;
    bool  _playingVitality;
    double  _prePhotoGapTime;
    bool  _shouldReusePlayer;
    float  _timeOffset;
    ISWrappedAVPlayer * _videoPlayer;
    NSError * _videoPlayerError;
    AVPlayerItem * _videoPlayerItem;
    long long  _videoPlayerStatus;
    bool  _videoVisible;
    float  _vitalityHintPlayRate;
    float  _vitalityPlayRate;
    float  _volume;
}

@property (nonatomic, readonly) ISAVPlayerController *_avPlayerController;
@property (setter=_setCrossfadePlaybackStartTime:, nonatomic) double _crossfadePlaybackStartTime;
@property (setter=_setCurrentPlaybackID:, nonatomic) long long _currentPlaybackID;
@property (setter=_setCurrentTransitionRequestID:, nonatomic) long long _currentTransitionRequestID;
@property (setter=_setHasStartedVideoForCurrentPlayback:, nonatomic) long long _hasStartedVideoForCurrentPlayback;
@property (setter=_setLastHintProgress:, nonatomic) double _lastHintProgress;
@property (nonatomic, readonly) NSHashTable *_outputs;
@property (nonatomic, readonly) ISReuseQueue *_playerReuseQueue;
@property (setter=_setPreviousPlaybackState:, nonatomic) long long _previousPlaybackState;
@property (nonatomic, readonly) ISPlaybackStateTransitionManager *_transitionManager;
@property (setter=_setVideoDuration:) struct { long long x1; int x2; unsigned int x3; long long x4; } _videoDuration;
@property (setter=_setVideoPlaybackRequestTime:, nonatomic) double _videoPlaybackRequestTime;
@property (nonatomic, readonly) id _videoPlayerPerformanceDiagnosticsTimeObserver;
@property (nonatomic) bool applyScaleToVideo;
@property (nonatomic) double crossfadeDuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (setter=_setHintProgress:, nonatomic) float hintProgress;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } idleTime;
@property (nonatomic) double maximumVideoTransitionDelay;
@property (nonatomic, readonly) NSSet *outputs;
@property (setter=_setPlayRate:, nonatomic) float playRate;
@property (nonatomic, copy) id /* block */ playbackEndHandler;
@property (nonatomic, retain) ISPlaybackSpec *playbackSpec;
@property (setter=_setPlaybackState:, nonatomic) long long playbackState;
@property (getter=isPlayingVitality, setter=_setPlayingVitality:, nonatomic) bool playingVitality;
@property (nonatomic) double prePhotoGapTime;
@property (readonly) Class superclass;
@property (setter=_setTimeOffset:, nonatomic) float timeOffset;
@property (nonatomic, readonly) ISWrappedAVPlayer *videoPlayer;
@property (setter=_setVideoPlayerError:, nonatomic, retain) NSError *videoPlayerError;
@property (nonatomic, retain) AVPlayerItem *videoPlayerItem;
@property (setter=_setVideoPlayerStatus:, nonatomic) long long videoPlayerStatus;
@property (nonatomic) float vitalityHintPlayRate;
@property (setter=_setVitalityPlayRate:, nonatomic) float vitalityPlayRate;
@property (nonatomic) float volume;

+ (id)_sharedPlayerReuseQueue;
+ (id)avfQueue;
+ (void)resetPlayerCache;

- (void).cxx_destruct;
- (id)_avPlayerController;
- (void)_callPlaybackEndHandler;
- (void)_configureOutput:(id)arg1;
- (double)_crossfadePlaybackStartTime;
- (long long)_currentPlaybackID;
- (long long)_currentTransitionRequestID;
- (void)_didEndTransitionToPlaybackState:(long long)arg1 forTransitionRequestID:(long long)arg2 finished:(bool)arg3;
- (void)_enumerateObserversWithBlock:(id /* block */)arg1;
- (void)_handleMediaServiceResetIfNecessaryWithError:(id)arg1;
- (long long)_hasStartedVideoForCurrentPlayback;
- (double)_lastHintProgress;
- (id)_outputs;
- (void)_performBeginPlaybackTransition;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_playbackEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_playbackStartTime;
- (id)_playerReuseQueue;
- (long long)_previousPlaybackState;
- (void)_setCrossfadePlaybackStartTime:(double)arg1;
- (void)_setCurrentPlaybackID:(long long)arg1;
- (void)_setCurrentTransitionRequestID:(long long)arg1;
- (void)_setHasStartedVideoForCurrentPlayback:(long long)arg1;
- (void)_setHintProgress:(float)arg1;
- (void)_setLastHintProgress:(double)arg1;
- (void)_setPlayRate:(float)arg1;
- (void)_setPlaybackState:(long long)arg1;
- (void)_setPlayingVitality:(bool)arg1;
- (void)_setPreviousPlaybackState:(long long)arg1;
- (void)_setTimeOffset:(float)arg1;
- (void)_setVideoDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setVideoPlaybackRequestTime:(double)arg1;
- (void)_setVideoPlayerError:(id)arg1;
- (void)_setVideoPlayerStatus:(long long)arg1;
- (void)_setVitalityPlayRate:(float)arg1;
- (void)_startVideoPlaybackWithPlaybackID:(long long)arg1;
- (id)_transitionManager;
- (void)_updatePlayerController;
- (void)_updatePlayerControllerVolume;
- (void)_updatePlayingVitality;
- (void)_updateStatus;
- (void)_videoDidPlayToEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_videoDuration;
- (double)_videoPlaybackRequestTime;
- (id)_videoPlayerPerformanceDiagnosticsTimeObserver;
- (void)_videoWillPlayToEndTime;
- (void)addOutput:(id)arg1;
- (bool)applyScaleToVideo;
- (void)avPlayerController:(id)arg1 avPlayer:(id)arg2 didChangeToStatus:(long long)arg3;
- (void)avPlayerControllerDidBeginPlaying:(id)arg1;
- (void)avPlayerControllerDidEndPlaying:(id)arg1;
- (void)avPlayerControllerDidEndSeeking:(id)arg1 seekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 didFinish:(bool)arg3;
- (void)avPlayerControllerWillEndPlaying:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })cachedDuration;
- (double)crossfadeDuration;
- (void)dealloc;
- (float)hintProgress;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })idleTime;
- (id)init;
- (id)initWithVideoPlayer:(id)arg1;
- (bool)isPlayingVitality;
- (double)maximumVideoTransitionDelay;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)outputs;
- (float)playRate;
- (id /* block */)playbackEndHandler;
- (id)playbackSpec;
- (long long)playbackState;
- (double)prePhotoGapTime;
- (void)registerObserver:(id)arg1;
- (void)removeOutput:(id)arg1;
- (void)setApplyScaleToVideo:(bool)arg1;
- (void)setCrossfadeDuration:(double)arg1;
- (void)setIdleTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMaximumVideoTransitionDelay:(double)arg1;
- (void)setPlaybackEndHandler:(id /* block */)arg1;
- (void)setPlaybackSpec:(id)arg1;
- (void)setPrePhotoGapTime:(double)arg1;
- (void)setVideoPlayerItem:(id)arg1;
- (void)setVitalityHintPlayRate:(float)arg1;
- (void)setVolume:(float)arg1;
- (float)timeOffset;
- (void)transitionManager:(id)arg1 didEndTransitionToPlaybackState:(long long)arg2 forRequestID:(long long)arg3 finished:(bool)arg4;
- (void)transitionToPlaybackState:(long long)arg1 playRate:(float)arg2 withTimeOffset:(float)arg3 vitalityPlayRate:(float)arg4 hintProgress:(float)arg5;
- (void)unregisterObserver:(id)arg1;
- (id)videoPlayer;
- (id)videoPlayerError;
- (id)videoPlayerItem;
- (long long)videoPlayerStatus;
- (float)vitalityHintPlayRate;
- (float)vitalityPlayRate;
- (float)volume;

@end
