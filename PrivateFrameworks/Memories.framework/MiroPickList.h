/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories
 */

@interface MiroPickList : NSObject <NSCopying> {
    NSArray * _adjustedPickOrder;
    NSMutableDictionary * _blueprintDurationCache;
    bool  _calculatingPickOrder;
    double  _cappedAndBiasedIdealCount;
    double  _countAtOrAboveBadT;
    NSArray * _dateOrder;
    struct DurationCache { 
        double duration; 
        float distance; 
        unsigned long long pace; 
    }  _defaultDuration;
    NSSet * _disallowedAssetIDs;
    NSDictionary * _freezeRanges;
    NSArray * _frozenAdjustedPickOrder;
    NSArray * _frozenSourceOrder;
    double  _idealCount;
    double  _longCount;
    NSArray * _pickOrder;
    NSSet * _requiredAssetIDs;
    NSArray * _scoreOrder;
    double  _shortCount;
    bool  _skipDistanceCalculation;
    NSArray * _sourceAssets;
    NSArray * _sourceOrder;
    NSArray * _splitOrder;
}

@property (nonatomic, retain) NSArray *adjustedPickOrder;
@property (nonatomic, retain) NSMutableDictionary *blueprintDurationCache;
@property (nonatomic) bool calculatingPickOrder;
@property (nonatomic) double cappedAndBiasedIdealCount;
@property (nonatomic, readonly) double countAtOrAboveBadT;
@property (nonatomic, retain) NSArray *dateOrder;
@property (nonatomic) struct DurationCache { double x1; float x2; unsigned long long x3; } defaultDuration;
@property (nonatomic, retain) NSSet *disallowedAssetIDs;
@property (nonatomic, retain) NSDictionary *freezeRanges;
@property (nonatomic, readonly) int freezeState;
@property (nonatomic, retain) NSArray *frozenAdjustedPickOrder;
@property (nonatomic, retain) NSArray *frozenSourceOrder;
@property (nonatomic, readonly) double idealCount;
@property (nonatomic, readonly) bool isCompelling;
@property (nonatomic) double longCount;
@property (nonatomic, retain) NSArray *pickOrder;
@property (nonatomic, retain) NSSet *requiredAssetIDs;
@property (nonatomic, retain) NSArray *scoreOrder;
@property (nonatomic) double shortCount;
@property (nonatomic) bool skipDistanceCalculation;
@property (nonatomic, retain) NSArray *sourceAssets;
@property (nonatomic, retain) NSArray *sourceOrder;
@property (nonatomic, retain) NSArray *splitOrder;

- (void).cxx_destruct;
- (id)_computeAdjustedPickOrder;
- (double)_fractionOfPickInfo:(id)arg1 coveredByRanges:(id)arg2;
- (double)_idealDurationForItem:(id)arg1 blueprint:(id)arg2;
- (double)_idealDurationWithBlueprint:(id)arg1 biased:(bool)arg2 capped:(bool)arg3;
- (id)_itemsForDuration:(double)arg1 blueprint:(id)arg2 localOnly:(bool)arg3 calculateMultiplier:(bool)arg4;
- (id)_pickInfosForAssetID:(id)arg1;
- (id)_pickInfosForTrimRanges:(id)arg1 ofAsset:(id)arg2;
- (void)_reset;
- (float)_speedForVideoSegment:(id)arg1;
- (double)_trimmedDurationForItem:(id)arg1;
- (double)_voiceRangeDurationForItem:(id)arg1 blueprint:(id)arg2;
- (id)adjustedPickOrder;
- (id)assetsUpToSceneIndex:(long long)arg1;
- (double)biasedIdealDurationWithBlueprint:(id)arg1;
- (id)blueprintDurationCache;
- (void)calculateFullPickList;
- (void)calculatePickListFromVPFrameworkResults;
- (bool)calculatingPickOrder;
- (double)cappedAndBiasedIdealCount;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)countAtOrAboveBadT;
- (double)countAtTValue:(double)arg1;
- (id)dateOrder;
- (struct DurationCache { double x1; float x2; unsigned long long x3; })defaultDuration;
- (id)description;
- (id)disallowedAssetIDs;
- (float)durationMultiplierForDuration:(double)arg1 blueprint:(id)arg2;
- (id)expandVideoAssetsAndConvertToScenes:(id)arg1;
- (id)freezeRanges;
- (int)freezeState;
- (id)frozenAdjustedPickOrder;
- (id)frozenSourceOrder;
- (id)highestScoringItemFromIndex:(long long)arg1 lookingRight:(bool)arg2;
- (id)highestScoringItemToTheLeftFromIndex:(long long)arg1;
- (id)highestScoringItemToTheRightFromIndex:(long long)arg1;
- (double)idealCount;
- (double)idealDurationForItem:(id)arg1 blueprint:(id)arg2;
- (double)idealDurationWithBlueprint:(id)arg1;
- (id)initWithAssets:(id)arg1;
- (bool)isCompelling;
- (id)itemsForDuration:(double)arg1 blueprint:(id)arg2;
- (id)locallyAvailableScenesUpToIndex:(long long)arg1;
- (double)longCount;
- (id)mediaAnalyzer;
- (id)pickOrder;
- (id)rangesForAssets:(id)arg1;
- (id)requiredAssetIDs;
- (void)resetAdjustedPickOrder;
- (void)resetDurationAndCountCaches;
- (id)scoreOrder;
- (void)setAdjustedPickOrder:(id)arg1;
- (void)setBlueprintDurationCache:(id)arg1;
- (void)setCalculatingPickOrder:(bool)arg1;
- (void)setCappedAndBiasedIdealCount:(double)arg1;
- (void)setDateOrder:(id)arg1;
- (void)setDefaultDuration:(struct DurationCache { double x1; float x2; unsigned long long x3; })arg1;
- (void)setDisallowedAssetIDs:(id)arg1;
- (void)setFreezeRanges:(id)arg1;
- (void)setFrozenAdjustedPickOrder:(id)arg1;
- (void)setFrozenSourceOrder:(id)arg1;
- (void)setLongCount:(double)arg1;
- (void)setPickOrder:(id)arg1;
- (void)setRequiredAssetIDs:(id)arg1;
- (void)setScoreOrder:(id)arg1;
- (void)setShortCount:(double)arg1;
- (void)setSkipDistanceCalculation:(bool)arg1;
- (void)setSourceAssets:(id)arg1;
- (void)setSourceOrder:(id)arg1;
- (void)setSplitOrder:(id)arg1;
- (double)shortCount;
- (bool)skipDistanceCalculation;
- (id)sourceAssets;
- (id)sourceOrder;
- (id)sourceOrderFromSourceAssets;
- (id)sourceOrderFromSourceAssetsViaNewAPI;
- (id)sourceOrderFromSourceAssetsViaNewAPIStoppingAtCompelling:(bool*)arg1;
- (id)sourceOrderFromSourceAssetsViaOldAPI;
- (id)splitDistancesForAssetID:(id)arg1;
- (id)splitOrder;
- (float)thresholdForDuration:(double)arg1 blueprint:(id)arg2;

@end
