/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories
 */

@interface MiroAutoEditKenBurnsController : NSObject {
    bool  _clipIsPortraitOrSquare;
    MiroCropZoomUtilities * _cropUtils;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _endRect;
    NSArray * _facesRanges;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _finishAreaOfInterest;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _framingRect;
    bool  _hasAreasOfInterest;
    double  _horizonNormalizedFromTop;
    bool  _interestingRegionsEstablished;
    KenBurnsClip * _kbClip;
    double  _maximumZoomValue;
    MiroMemory * _memory;
    unsigned long long  _panStyle;
    Project * _project;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _startAreaOfInterest;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _startRect;
    bool  _targetSpecificPerson;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllFaceRegions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllInterestingRegions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllSaliencyRegions;
}

@property (nonatomic) bool clipIsPortraitOrSquare;
@property (nonatomic, retain) MiroCropZoomUtilities *cropUtils;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } endRect;
@property (nonatomic, retain) NSArray *facesRanges;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } finishAreaOfInterest;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } framingRect;
@property (nonatomic) bool hasAreasOfInterest;
@property (nonatomic) double horizonNormalizedFromTop;
@property (nonatomic) bool interestingRegionsEstablished;
@property (nonatomic) KenBurnsClip *kbClip;
@property (nonatomic) double maximumZoomValue;
@property (nonatomic, retain) MiroMemory *memory;
@property (nonatomic) unsigned long long panStyle;
@property (nonatomic, retain) Project *project;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } startAreaOfInterest;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } startRect;
@property (nonatomic) bool targetSpecificPerson;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllFaceRegions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllInterestingRegions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllSaliencyRegions;

+ (void)establishPanAndZoomForKenBurnsClip:(id)arg1 andProject:(id)arg2 hintIsInMultiUp:(bool)arg3;
+ (void)prepareKBClip:(id)arg1 project:(id)arg2 clipSaveQueue:(id)arg3 hintIsInMultiUp:(bool)arg4;

- (void).cxx_destruct;
- (void)_adjustTranslationSpeedOfKenBurnsClip:(id)arg1;
- (void)_adjustZoomSpeedOfKenBurnsClip;
- (void)_customizeKBWithPillarboxing:(id)arg1;
- (void)_customizePanOnlyKenBurnsClip:(id)arg1 withPanStyle:(unsigned long long)arg2 maxZoom:(double)arg3;
- (void)_customizePanoramaClip:(id)arg1 kenBurnsStyle:(unsigned long long)arg2 memory:(id)arg3 isFirstClip:(bool)arg4 isLastClip:(bool)arg5;
- (void)_customizePortraitKB:(id)arg1 normalizedVerticalCenter:(double)arg2;
- (double)_desiredAnimationDistanceForKenBurnsClip:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_endFrameFromImageSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 forStyle:(unsigned long long)arg3;
- (bool)_notMuchTimeForAnimationOfKenBurnsClip:(id)arg1;
- (double)_scaleToPanOffsetFromScale:(double)arg1;
- (bool)_shouldPanRightForPanoramaClip:(id)arg1 kenBurnsStyle:(unsigned long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_startFrameFromImageSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 forStyle:(unsigned long long)arg3;
- (void)applyKenBurnsForClip:(id)arg1 kenBurnsStyle:(unsigned long long)arg2 panStyle:(unsigned long long)arg3 kenBurnsPace:(unsigned long long)arg4 maxiumumZoomValue:(double)arg5;
- (bool)canSupportKB;
- (double)clampZoomDifference:(double)arg1 kenBurnsPace:(unsigned long long)arg2;
- (bool)clipIsPortraitOrSquare;
- (void)composeFinishAreaOfInterest;
- (void)composeStartAreaOfInterest;
- (id)cropUtils;
- (void)determineFaceInformation;
- (void)determineHorizonAndVanishingPoint;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })endRect;
- (void)establishFramingRect;
- (void)establishInterestingRegions;
- (id)facesRanges;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })finishAreaOfInterest;
- (void)finishConfiguringKBInfo;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })framingRect;
- (bool)hasAreasOfInterest;
- (bool)hasInterestingRegionToFocusOn;
- (double)horizonNormalizedFromTop;
- (bool)interestingRegionsEstablished;
- (id)kbClip;
- (double)maximumZoomValue;
- (id)memory;
- (void)modifyStartAndEndRectForKBStyle:(unsigned long long)arg1 kbPace:(unsigned long long)arg2 portraitNoInfo:(bool)arg3;
- (unsigned long long)panStyle;
- (id)project;
- (bool)rectCanBeUsedForCropping:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })roundValuesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClipIsPortraitOrSquare:(bool)arg1;
- (void)setCropUtils:(id)arg1;
- (void)setEndRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFacesRanges:(id)arg1;
- (void)setFinishAreaOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFramingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasAreasOfInterest:(bool)arg1;
- (void)setHorizonNormalizedFromTop:(double)arg1;
- (void)setInterestingRegionsEstablished:(bool)arg1;
- (void)setKbClip:(id)arg1;
- (void)setMaximumZoomValue:(double)arg1;
- (void)setMemory:(id)arg1;
- (void)setPanStyle:(unsigned long long)arg1;
- (void)setProject:(id)arg1;
- (void)setStartAreaOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setStartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTargetSpecificPerson:(bool)arg1;
- (void)setUnionOfAllFaceRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnionOfAllInterestingRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnionOfAllSaliencyRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })startAreaOfInterest;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })startRect;
- (bool)targetSpecificPerson;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllFaceRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllInterestingRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllSaliencyRegions;
- (void)updateInterestingRegionsWithSaliency;

@end
