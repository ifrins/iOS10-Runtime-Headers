/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories
 */

@interface MiroTimePickBlueprintManager : NSObject <NSCopying> {
    MiroBlueprint * _blueprint;
    NSMutableDictionary * _blueprintDurationCache;
    struct MiroBucketLineTriplet { 
        double shortMax; 
        double mediumMax; 
        double longMinimum; 
        bool longIncludesIdealMax; 
        bool idealIsShort; 
    }  _calculatedNormalBucketLineTriplet;
    struct MiroBucketLineTriplet { 
        double shortMax; 
        double mediumMax; 
        double longMinimum; 
        bool longIncludesIdealMax; 
        bool idealIsShort; 
    }  _currentBucketLineTriplet;
    struct MiroPickedCountDurationCombo { 
        long long pickedCount; 
        double duration; 
        double residual; 
        bool blueprintMaxAllowed; 
        bool videoMaxAllowed; 
    }  _currentPickedCountDurationCombo;
    struct MiroIdealCounts { 
        long long shortCount; 
        long long mediumCount; 
        long long longCount; 
        long long idealCount; 
        long long cappedIdealCount; 
    }  _idealCountsTriplet;
    double  _normalizedIdealDuration;
    MiroPickList * _pickList;
}

@property (nonatomic, retain) MiroBlueprint *blueprint;
@property (nonatomic, retain) NSMutableDictionary *blueprintDurationCache;
@property (nonatomic) struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; } calculatedNormalBucketLineTriplet;
@property (nonatomic) struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; } currentBucketLineTriplet;
@property (nonatomic) struct MiroPickedCountDurationCombo { long long x1; double x2; double x3; bool x4; bool x5; } currentPickedCountDurationCombo;
@property (nonatomic) struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; } idealCountsTriplet;
@property (nonatomic, readonly) long long idealPickedCount;
@property (nonatomic, readonly) double longDuration;
@property (nonatomic, readonly) unsigned long long longDurationRange;
@property (nonatomic, readonly) double maximumDurationForGoodEdit;
@property (nonatomic) double normalizedIdealDuration;
@property (nonatomic, retain) MiroPickList *pickList;

- (void).cxx_destruct;
- (void)_determineAdaptiveIdealCounts;
- (double)_durationForItemCount:(long long)arg1 blueprint:(id)arg2 localOnly:(bool)arg3 useBlueprintMax:(bool)arg4 useContentMax:(bool)arg5;
- (double)_durationForPickedCount:(long long)arg1 withBlueprint:(id)arg2 fallbackToCurrentOk:(bool)arg3;
- (void)_establishAdaptiveNormalizedBucketLinesForIdealCounts:(struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; })arg1;
- (double)_idealDurationWithBlueprint:(id)arg1 capped:(bool)arg2;
- (long long)_itemCountForDuration:(double)arg1 allowBlueprintMax:(bool)arg2 allowVideoMax:(bool)arg3 outputResidual:(double*)arg4;
- (id)_itemsForDuration:(double)arg1 blueprint:(id)arg2 localOnly:(bool)arg3 allowBlueprintMax:(bool)arg4 allowVideoMax:(bool)arg5;
- (float)_speedForVideoSegment:(id)arg1;
- (double)_trimmedDurationForItem:(id)arg1;
- (double)_voiceRangeDurationForItem:(id)arg1 blueprint:(id)arg2;
- (id)blueprint;
- (id)blueprintDurationCache;
- (struct MiroPickedCountDurationCombo { long long x1; double x2; double x3; bool x4; bool x5; })cachedDurationComboForItemCount:(long long)arg1 forBlueprint:(id)arg2;
- (struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; })calculatedNormalBucketLineTriplet;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; })currentBucketLineTriplet;
- (struct MiroPickedCountDurationCombo { long long x1; double x2; double x3; bool x4; bool x5; })currentPickedCountDurationCombo;
- (id)description;
- (void)determineIdealCounts;
- (void)determineNormalizedIdealDuration:(struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; })arg1;
- (double)durationForDurationRange:(unsigned long long)arg1;
- (double)durationForPickedCount:(long long)arg1;
- (double)durationForPickedCount:(long long)arg1 withBlueprint:(id)arg2;
- (double)durationOfItemsBetweenIdealAndBadTForBlueprint:(id)arg1 localOnly:(bool)arg2 useBlueprintMax:(bool)arg3;
- (bool)durationShouldIncludeBlueprintMax:(double)arg1;
- (bool)durationShouldIncludeContentMax:(double)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)establishBucketLinesForBlueprint:(id)arg1;
- (void)establishNormalizedBucketLinesForIdealCounts:(struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; })arg1;
- (struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; })idealCountsTriplet;
- (double)idealDurationForItem:(id)arg1 blueprint:(id)arg2;
- (double)idealMaxDurationForItem:(id)arg1 blueprint:(id)arg2;
- (long long)idealPickedCount;
- (id)initWithCoder:(id)arg1;
- (id)initWithPickList:(id)arg1 blueprint:(id)arg2 prepareNormalizedIdeals:(bool)arg3;
- (long long)itemCountForDuration:(double)arg1 outputResidual:(double*)arg2 countIsCurrent:(bool)arg3;
- (double)longDuration;
- (double)longDurationAtBlueprint:(id)arg1;
- (unsigned long long)longDurationRange;
- (double)maximumDurationForGoodEdit;
- (double)maximumDurationForItem:(id)arg1 blueprint:(id)arg2;
- (id)normalizedBlueprint;
- (double)normalizedIdealDuration;
- (id)pickList;
- (void)prepareNormalizedIdeals;
- (void)resetCalculations;
- (void)setBlueprint:(id)arg1;
- (void)setBlueprintDurationCache:(id)arg1;
- (void)setCachedDurationCombo:(struct MiroPickedCountDurationCombo { long long x1; double x2; double x3; bool x4; bool x5; })arg1 forBlueprint:(id)arg2;
- (void)setCalculatedNormalBucketLineTriplet:(struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; })arg1;
- (void)setCurrentBucketLineTriplet:(struct MiroBucketLineTriplet { double x1; double x2; double x3; bool x4; bool x5; })arg1;
- (void)setCurrentPickedCount:(long long)arg1 duration:(double)arg2 durationRemainder:(double)arg3;
- (void)setCurrentPickedCountDurationCombo:(struct MiroPickedCountDurationCombo { long long x1; double x2; double x3; bool x4; bool x5; })arg1;
- (void)setIdealCountsTriplet:(struct MiroIdealCounts { long long x1; long long x2; long long x3; long long x4; long long x5; })arg1;
- (void)setNormalizedIdealDuration:(double)arg1;
- (void)setPickList:(id)arg1;

@end
