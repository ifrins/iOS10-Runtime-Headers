/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CVML.framework/CVML
 */

@interface CVMLHumanDetector : CVMLDetector {
    struct TemplateObjectDetectorApply { int x1; int x2; int x3; int x4; bool x5; float x6[2]; float x7[2]; float x8; bool x9; bool x10; float x11; float x12; int x13; float x14; struct hog { struct gradient { } x_15_1_1; } x15; struct ChnsFeat { int x_16_1_1; int x_16_1_2; struct hog { struct gradient { } x_3_2_1; } x_16_1_3; struct gradient { } x_16_1_4; } x16; int x17; struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_18_1_1; struct DTreeApply {} *x_18_1_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_2_1; } x_18_1_3; } x18; struct vector<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_1; struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_2; struct __compressed_pair<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > *, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_3_2_1; } x_19_1_3; } x19; struct vector<float, std::__1::allocator<float> > { float *x_20_1_1; float *x_20_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_20_1_3; } x20; struct vector<vision::hum::DTreeNode *, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_21_1_1; struct DTreeNode {} **x_21_1_2; struct __compressed_pair<vision::hum::DTreeNode **, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_3_2_1; } x_21_1_3; } x21; float x22; struct adaBoostApply { struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_1_2_1; struct DTreeApply {} *x_1_2_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_3_1; } x_1_2_3; } x_23_1_1; } x23; struct linearSVMApply { struct vector<float, std::__1::allocator<float> > { float *x_1_2_1; float *x_1_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_1_2_3; } x_24_1_1; float x_24_1_2; struct vector<float, std::__1::allocator<float> > { float *x_3_2_1; float *x_3_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; id x25; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void x39; void*x40; out void*x41; int x42; void*x43; double x44; void*x45; char *x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void x60; void*x61; out void*x62; int x63; void*x64; double x65; void*x66; char *x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void x81; void*x82; out void*x83; int x84; void*x85; double x86; void*x87; char *x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void x102; void*x103; out void*x104; int x105; void*x106; double x107; void*x108; char *x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void x123; void*x124; out void*x125; int x126; void*x127; double x128; void*x129; char *x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void x144; void*x145; out void*x146; int x147; void*x148; double x149; void*x150; char *x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void x165; void*x166; out void*x167; int x168; void*x169; double x170; void*x171; char *x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void x186; void*x187; out void*x188; int x189; void*x190; double x191; void*x192; char *x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void x207; void*x208; out void*x209; int x210; void*x211; double x212; void*x213; char *x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void x228; void*x229; out void*x230; int x231; void*x232; double x233; void*x234; char *x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void x249; void*x250; out void*x251; int x252; void*x253; double x254; void*x255; char *x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void x270; void*x271; out void*x272; int x273; void*x274; double x275; void*x276; char *x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void x291; void*x292; out void*x293; int x294; void*x295; double x296; void*x297; char *x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void x312; void*x313; out void*x314; int x315; void*x316; double x317; void*x318; char *x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; BOOL x333; void*x334; void*x335; void*x336; void*x337; void*x338; const void*x339; void*x340; void*x341; char *x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void x356; void*x357; out void*x358; int x359; void*x360; double x361; void*x362; char *x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void x377; void*x378; out void*x379; int x380; void*x381; double x382; void*x383; char *x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; long doublex406; void x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; long doublex414; void x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; const void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; const void*x430; void*x431; void*x432; void*x433; void*x434; float x435; void*x436; short x437; void*x438; void*x439; void*x440; void*x441; id x442; void*x443; short x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; char *x451; short x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; short x460; void*x461; void*x462; void*x463; void*x464; id x465; void*x466; long long x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; long long x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; long long x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; const void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; long doublex513; const void*x514; void*x515; void*x516; void*x517; void*x518; bycopy void*x519; short x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; const void*x536; void*x537; void*x538; void*x539; id x540; void*x541; long long x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; short x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; short x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; long doublex565; long long x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; double x573; const void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; const void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; short x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; const void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; const void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; const void*x618; void*x619; void*x620; void*x621; void*x622; void*x623; void*x624; const void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; char *x631; long long x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; short x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; long long x648; void*x649; void*x650; void*x651; void*x652; void*x653; BOOL x654; void*x655; const void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; const void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; long doublex669; long long x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; const void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; long long x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; const void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; const void*x700; void*x701; void*x702; void*x703; id x704; void*x705; const void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; const void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; short x720; void*x721; void*x722; void*x723; void*x724; id x725; void*x726; long long x727; void*x728; void*x729; void*x730; void*x731; void*x732; unsigned int x733/* : ? */; void*x734; long long x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; short x743; void*x744; void*x745; void*x746; void*x747; id x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; short x758; void*x759; void*x760; void*x761; void*x762; void*x763; long long x764; void*x765; const void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; const void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; const void*x780; void*x781; void*x782; void*x783; void*x784; SEL x785; long doublex786; short x787; void*x788; void*x789; void*x790; void*x791; void*x792; void*x793; void*x794; long long x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; long long x803; void*x804; void*x805; void*x806; void*x807; void*x808; SEL x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; id x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; void*x851; void*x852; void*x853; void*x854; void*x855; void*x856; void*x857; void*x858; void*x859; void*x860; void*x861; void*x862; void*x863; void*x864; void*x865; void*x866; void*x867; void*x868; void*x869; void*x870; void*x871; void*x872; } * mHumanDetectorAlgorithmImpl_;
}

- (void)dealloc;
- (id)initWithOptions:(id)arg1 error:(id*)arg2;
- (id)processWithOptions:(id)arg1 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 warningRecorder:(id)arg3 error:(id*)arg4;

@end
