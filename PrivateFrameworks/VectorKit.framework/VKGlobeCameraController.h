/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKGlobeCameraController : VKScreenCameraController <VKGesturingCameraController> {
    double  _beganDoublePanPitch;
    struct CameraManager { 
        int (**_vptr$CameraManager)(); 
        bool _panBegin; 
        bool _panInProgress; 
        bool _panEnd; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _panCurrentCursor; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _panPreviousCursor; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _panStartCursor; 
        struct Coordinate3D<Radians, double> { 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } latitude; 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } longitude; 
            struct Unit<MeterUnitDescription, double> { 
                double _value; 
            } altitude; 
        } _panStartPosition; 
        double _panDistance; 
        bool _panAtStartPosition; 
        bool _rotateBegin; 
        bool _rotateInProgress; 
        bool _rotateEnd; 
        struct Position3d { 
            double _latitude; 
            double _longitude; 
            double _height; 
        } _rotateStartPosition; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _rotateCurrentCursor; 
        double _rotateAngle; 
        bool _tiltBegin; 
        bool _tiltInProgress; 
        bool _tiltEnd; 
        struct Position3d { 
            double _latitude; 
            double _longitude; 
            double _height; 
        } _tiltStartPosition; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _tiltCurrentCursor; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _tiltPreviousCursor; 
        double _tiltAngle; 
        bool _zoomBegin; 
        bool _zoomInProgress; 
        bool _zoomEnd; 
        struct Position3d { 
            double _latitude; 
            double _longitude; 
            double _height; 
        } _zoomStartPosition; 
        struct Matrix<int, 2, 1> { 
            int _e[2]; 
        } _zoomCurrentCursor; 
        double _zoomFactor; 
        double _zoomStartDistance; 
        bool _zoomRotateToNorth; 
        bool _useTiltLimit; 
        int _tiltLimitMode; 
        bool _tiltLimitPushDownEnabled; 
        bool _tiltLimitTransferInProgress; 
        bool _tiltLimitPushDown; 
        double _startPushDownTilt; 
        double _tiltLimitTransferFraction; 
        double _startTiltLimitTilt; 
        struct PositionGeo3d { 
            double _x; 
            double _y; 
            double _z; 
        } _startTiltLimitPosition; 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _startTiltLimitDirection; 
        double _fullZoomTiltLimitFactor; 
    }  _cameraManager;
    bool  _couldEnter3DMode;
    double  _currentDoublePanPitch;
    double  _currentZoomLevel;
    int  _flyoverMode;
    struct GlobeView { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Context {} *x4; struct DtmCacheNode {} *x5; struct DtmRequestManager {} *x6; struct FreezeViewNode {} *x7; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_8_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_8_1_2; bool x_8_1_3; bool x_8_1_4; } x8; struct FrameLatLon { double x_9_1_1; double x_9_1_2; double x_9_1_3; double x_9_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_9_1_5; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_13_1_1; struct TileBound {} *x_13_1_2; struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_3_2_1; } x_13_1_3; } x13; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_14_1_1; struct SimpleTileKey {} *x_14_1_2; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_3_2_1; } x_14_1_3; } x14; bool x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; struct VKClassicGlobeCanvas { } *x20; bool x21; bool x22; int x23; struct AnimationManager { struct AnimationTimer { struct AnimationReferenceTimer {} *x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_24_1_1; double x_24_1_2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_2_1; struct AnimationObjectHolder {} *x_3_2_2; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; struct Timer { double x_25_1_1; } x25; double x26; bool x27; double x28; double x29; double x30; struct FrameLatLon { double x_31_1_1; double x_31_1_2; double x_31_1_3; double x_31_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_31_1_5; } x31; struct C3mmRequestManager {} *x32; struct RenderableGroup {} *x33; unsigned int x34; double x35; bool x36; bool x37; struct LabelDataManagerPrivate {} *x38; bool x39; bool x40; bool x41; bool x42; struct RouteLineManager {} *x43; struct GlobeCleanupLoader {} *x44; struct CompleteGlobeTileSetCullingGraph {} *x45; struct CompleteGlobeTileSetLoader {} *x46; struct TileSetNode {} *x47; struct GlobeTileRenderManager {} *x48; struct CullingNode {} *x49; struct EarthAdjustedViewNode {} *x50; struct UserViewNode {} *x51; struct View {} *x52; struct BasicViewNode {} *x53; struct GlobeMainViewNode {} *x54; struct C3bRequestManager {} *x55; float x56; bool x57; struct shared_ptr<bool> { bool *x_58_1_1; struct __shared_weak_count {} *x_58_1_2; } x58; struct HeightRequestManager {} *x59; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_60_1_1; } x60; struct Mutex { void *x_61_1_1; } x61; struct shared_ptr<altitude::Stylesheet> { struct Stylesheet {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct FlyoverTour {} *x63; bool x64; struct TriggerManager {} *x65; struct Viewport { int x_66_1_1; int x_66_1_2; int x_66_1_3; int x_66_1_4; } x66; struct AnimationReferenceTimer { double x_67_1_1; double x_67_1_2; double x_67_1_3; } x67; bool x68; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_node<altitude::ManifestListener *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x_3_3_1; } x_1_2_3; } x_69_1_1; } x69; struct GeoServicesLoader {} *x70; struct ManifestManager {} *x71; struct GlobeDispatch {} *x72; } * _globeView;
    bool  _isPitching;
    bool  _isRotating;
    double  _lastRotation;
    double  _maxZoomLevel;
    struct CGPoint { 
        double x; 
        double y; 
    }  _panLastScreenPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _panStartScreenPoint;
    bool  _wasPitched;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int flyoverMode;
@property (nonatomic) struct GlobeView { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Context {} *x4; struct DtmCacheNode {} *x5; struct DtmRequestManager {} *x6; struct FreezeViewNode {} *x7; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_8_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_8_1_2; bool x_8_1_3; bool x_8_1_4; } x8; struct FrameLatLon { double x_9_1_1; double x_9_1_2; double x_9_1_3; double x_9_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_9_1_5; } x9; bool x10; /* Warning: unhandled struct encoding: '{basic_string<char' */ struct x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; long doublex23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; const struct                            { void*x_37_1_1; void*x_37_1_2; void*x_37_1_3; void*x_37_1_4; void*x_37_1_5; void*x_37_1_6; void*x_37_1_7; void*x_37_1_8; void*x_37_1_9; void*x_37_1_10; void*x_37_1_11; void*x_37_1_12; void*x_37_1_13; void*x_37_1_14; void*x_37_1_15; void*x_37_1_16; void*x_37_1_17; void*x_37_1_18; void*x_37_1_19; void*x_37_1_20; void*x_37_1_21; void*x_37_1_22; void*x_37_1_23; void*x_37_1_24; void*x_37_1_25; void*x_37_1_26; void*x_37_1_27; void*x_37_1_28; void*x_37_1_29; void*x_37_1_30; void*x_37_1_31; void*x_37_1_32; void*x_37_1_33; void*x_37_1_34; void*x_37_1_35; void*x_37_1_36; void*x_37_1_37; void*x_37_1_38; void*x_37_1_39; void*x_37_1_40; void*x_37_1_41; void*x_37_1_42; void*x_37_1_43; void*x_37_1_44; void*x_37_1_45; void*x_37_1_46; void*x_37_1_47; void*x_37_1_48; void*x_37_1_49; void*x_37_1_50; void*x_37_1_51; void*x_37_1_52; void*x_37_1_53; void*x_37_1_54; void*x_37_1_55; void*x_37_1_56; void*x_37_1_57; void*x_37_1_58; void*x_37_1_59; void*x_37_1_60; void*x_37_1_61; void*x_37_1_62; void*x_37_1_63; void*x_37_1_64; void*x_37_1_65; void*x_37_1_66; void*x_37_1_67; void*x_37_1_68; void*x_37_1_69; void*x_37_1_70; void*x_37_1_71; void*x_37_1_72; void*x_37_1_73; void*x_37_1_74; void*x_37_1_75; void*x_37_1_76; void*x_37_1_77; void*x_37_1_78; void*x_37_1_79; void*x_37_1_80; void*x_37_1_81; void*x_37_1_82; void*x_37_1_83; void*x_37_1_84; void*x_37_1_85; void*x_37_1_86; void*x_37_1_87; void*x_37_1_88; void*x_37_1_89; void*x_37_1_90; void*x_37_1_91; void*x_37_1_92; void*x_37_1_93; void*x_37_1_94; void*x_37_1_95; void*x_37_1_96; void*x_37_1_97; void*x_37_1_98; void*x_37_1_99; void*x_37_1_100; void*x_37_1_101; void*x_37_1_102; void*x_37_1_103; void*x_37_1_104; void*x_37_1_105; void*x_37_1_106; void*x_37_1_107; void*x_37_1_108; void*x_37_1_109; void*x_37_1_110; void*x_37_1_111; void*x_37_1_112; void*x_37_1_113; void*x_37_1_114; void*x_37_1_115; void*x_37_1_116; void*x_37_1_117; void*x_37_1_118; void*x_37_1_119; void*x_37_1_120; void*x_37_1_121; void*x_37_1_122; void*x_37_1_123; void*x_37_1_124; void*x_37_1_125; void*x_37_1_126; void*x_37_1_127; void*x_37_1_128; void*x_37_1_129; void*x_37_1_130; void*x_37_1_131; void*x_37_1_132; void*x_37_1_133; void*x_37_1_134; void*x_37_1_135; void*x_37_1_136; void*x_37_1_137; void*x_37_1_138; void*x_37_1_139; void*x_37_1_140; void*x_37_1_141; void*x_37_1_142; void*x_37_1_143; void*x_37_1_144; void*x_37_1_145; void*x_37_1_146; void*x_37_1_147; void*x_37_1_148; void*x_37_1_149; void*x_37_1_150; void*x_37_1_151; void*x_37_1_152; void*x_37_1_153; void*x_37_1_154; void*x_37_1_155; void*x_37_1_156; void*x_37_1_157; void*x_37_1_158; void*x_37_1_159; void*x_37_1_160; void*x_37_1_161; void*x_37_1_162; void*x_37_1_163; void*x_37_1_164; void*x_37_1_165; void*x_37_1_166; void*x_37_1_167; void*x_37_1_168; void*x_37_1_169; void*x_37_1_170; void*x_37_1_171; void*x_37_1_172; void*x_37_1_173; void*x_37_1_174; void*x_37_1_175; void*x_37_1_176; void*x_37_1_177; void*x_37_1_178; void*x_37_1_179; void*x_37_1_180; void*x_37_1_181; void*x_37_1_182; void*x_37_1_183; void*x_37_1_184; void*x_37_1_185; void*x_37_1_186; void*x_37_1_187; void*x_37_1_188; void*x_37_1_189; void*x_37_1_190; void*x_37_1_191; void*x_37_1_192; void*x_37_1_193; void*x_37_1_194; void*x_37_1_195; out void*x_37_1_196; short x_37_1_197; void*x_37_1_198; int x_37_1_199; void*x_37_1_200; void*x_37_1_201; void*x_37_1_202; int x_37_1_203; void*x_37_1_204; out void*x_37_1_205; in void*x_37_1_206; void*x_37_1_207; void*x_37_1_208; double x_37_1_209; void*x_37_1_210; void*x_37_1_211; void*x_37_1_212; struct x_37_1_213; void*x_37_1_214; void*x_37_1_215; void*x_37_1_216; void*x_37_1_217; void*x_37_1_218; void*x_37_1_219; void*x_37_1_220; void*x_37_1_221; void*x_37_1_222; void*x_37_1_223; void*x_37_1_224; void*x_37_1_225; void*x_37_1_226; void*x_37_1_227; void*x_37_1_228; void*x_37_1_229; void*x_37_1_230; void*x_37_1_231; void*x_37_1_232; void*x_37_1_233; void*x_37_1_234; void*x_37_1_235; void*x_37_1_236; void*x_37_1_237; void*x_37_1_238; void*x_37_1_239; void*x_37_1_240; void*x_37_1_241; void*x_37_1_242; double x_37_1_243; void*x_37_1_244; out void*x_37_1_245; void*x_37_1_246; void*x_37_1_247; unsigned int x_37_1_248/* : ? */; void*x_37_1_249; long x_37_1_250; void*x_37_1_251; void*x_37_1_252; void*x_37_1_253; void*x_37_1_254; void*x_37_1_255; void*x_37_1_256; void*x_37_1_257; long x_37_1_258; void*x_37_1_259; void*x_37_1_260; void*x_37_1_261; void*x_37_1_262; void*x_37_1_263; int x_37_1_264; void*x_37_1_265; void*x_37_1_266; void*x_37_1_267; void*x_37_1_268; void*x_37_1_269; double x_37_1_270; void*x_37_1_271; void*x_37_1_272; void*x_37_1_273; void*x_37_1_274; void*x_37_1_275; void*x_37_1_276; void*x_37_1_277; void*x_37_1_278; void*x_37_1_279; void*x_37_1_280; void*x_37_1_281; void*x_37_1_282; void*x_37_1_283; void*x_37_1_284; void*x_37_1_285; void*x_37_1_286; void*x_37_1_287; void*x_37_1_288; void*x_37_1_289; void*x_37_1_290; void*x_37_1_291; void*x_37_1_292; void*x_37_1_293; void*x_37_1_294; void*x_37_1_295; void*x_37_1_296; void*x_37_1_297; void*x_37_1_298; void*x_37_1_299; void*x_37_1_300; void*x_37_1_301; void*x_37_1_302; void*x_37_1_303; double x_37_1_304; void*x_37_1_305; out void*x_37_1_306; void*x_37_1_307; void*x_37_1_308; unsigned int x_37_1_309/* : ? */; void*x_37_1_310; long x_37_1_311; void*x_37_1_312; void*x_37_1_313; void*x_37_1_314; void*x_37_1_315; void*x_37_1_316; void*x_37_1_317; void*x_37_1_318; long x_37_1_319; void*x_37_1_320; out void*x_37_1_321; in void*x_37_1_322; void*x_37_1_323; void*x_37_1_324; int x_37_1_325; void*x_37_1_326; void*x_37_1_327; void*x_37_1_328; void*x_37_1_329; void*x_37_1_330; double x_37_1_331; void*x_37_1_332; void*x_37_1_333; void*x_37_1_334; void*x_37_1_335; void*x_37_1_336; void*x_37_1_337; void*x_37_1_338; void*x_37_1_339; void*x_37_1_340; void*x_37_1_341; void*x_37_1_342; void*x_37_1_343; void*x_37_1_344; void*x_37_1_345; void*x_37_1_346; void*x_37_1_347; void*x_37_1_348; void*x_37_1_349; void*x_37_1_350; void*x_37_1_351; void*x_37_1_352; void*x_37_1_353; void*x_37_1_354; void*x_37_1_355; void*x_37_1_356; void*x_37_1_357; void*x_37_1_358; void*x_37_1_359; void*x_37_1_360; void*x_37_1_361; void*x_37_1_362; void*x_37_1_363; void*x_37_1_364; double x_37_1_365; void*x_37_1_366; out void*x_37_1_367; void*x_37_1_368; void*x_37_1_369; unsigned int x_37_1_370/* : ? */; void*x_37_1_371; long x_37_1_372; void*x_37_1_373; void*x_37_1_374; void*x_37_1_375; void*x_37_1_376; void*x_37_1_377; void*x_37_1_378; void*x_37_1_379; void*x_37_1_380; void*x_37_1_381; void*x_37_1_382; void*x_37_1_383; int x_37_1_384; void*x_37_1_385; void*x_37_1_386; void*x_37_1_387; void*x_37_1_388; void*x_37_1_389; void*x_37_1_390; void*x_37_1_391; void*x_37_1_392; void*x_37_1_393; void*x_37_1_394; void*x_37_1_395; void*x_37_1_396; void*x_37_1_397; void*x_37_1_398; void*x_37_1_399; void*x_37_1_400; void*x_37_1_401; void*x_37_1_402; void*x_37_1_403; void*x_37_1_404; void*x_37_1_405; void*x_37_1_406; void*x_37_1_407; void*x_37_1_408; void*x_37_1_409; void*x_37_1_410; void*x_37_1_411; void*x_37_1_412; void*x_37_1_413; } *x37; void*x38; void*x39; void*x40; void*x41; void*x42; char *x43; char *x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; out void*x51; short x52; void*x53; int x54; void*x55; void*x56; void*x57; int x58; void*x59; out void*x60; in void*x61; void*x62; void*x63; double x64; void*x65; void*x66; void*x67; struct x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; double x98; void*x99; out void*x100; void*x101; void*x102; unsigned int x103/* : ? */; void*x104; long x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; long x113; void*x114; void*x115; void*x116; void*x117; void*x118; int x119; void*x120; void*x121; void*x122; void*x123; void*x124; double x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; double x159; void*x160; out void*x161; void*x162; void*x163; unsigned int x164/* : ? */; void*x165; long x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; long x174; void*x175; out void*x176; in void*x177; void*x178; void*x179; int x180; void*x181; void*x182; void*x183; void*x184; void*x185; double x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; double x220; void*x221; out void*x222; void*x223; void*x224; unsigned int x225/* : ? */; void*x226; long x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; int x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; }*globeView; /* unknown property attribute:  std::__1::less<altitude::ManifestListener *> >=Q}}}^{GeoServicesLoader}^{ManifestManager}^{GlobeDispatch}} */
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct { double x1; double x2; })_centerCoordinateForMapRegion:(id)arg1;
- (double)_fovAdjustment;
- (void)_updateCanEnter3DMode;
- (void)_updateGlobeFromCamera;
- (void)_updateIsPitched;
- (void)adjustLoadingForAnimation:(float)arg1 progressFactor:(float)arg2;
- (double)altitude;
- (struct PositionGeo3d { double x1; double x2; double x3; })cameraPosition;
- (bool)canEnter3DMode;
- (struct { double x1; double x2; })centerCoordinate;
- (id /* block */)createMoveToZoomOutZoomInFrameFunction:(struct FrameLatLon { double x1; double x2; double x3; double x4; struct PositionLatLonAlt { double x_5_1_1; double x_5_1_2; double x_5_1_3; } x5; })arg1 toLatLon:(struct FrameLatLon { double x1; double x2; double x3; double x4; struct PositionLatLonAlt { double x_5_1_1; double x_5_1_2; double x_5_1_3; } x5; })arg2;
- (double)currentZoomLevel;
- (void)dealloc;
- (double)distanceFromCenterCoordinate;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (double)earthRadiusAt:(double)arg1;
- (void)enter3DMode;
- (void)exit3DMode;
- (int)flyoverMode;
- (void)flyoverTourAnimation:(id)arg1 animateToStart:(bool)arg2 labelChanged:(id /* block */)arg3 stateChange:(id /* block */)arg4;
- (double)geocAngleBetween:(struct { double x1; double x2; })arg1 andCoordinate:(struct { double x1; double x2; })arg2;
- (struct Matrix<double, 3, 1> { double x1[3]; })geocentricFromPosition:(struct PositionLatLonAlt { double x1; double x2; double x3; })arg1;
- (struct GlobeView { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Context {} *x4; struct DtmCacheNode {} *x5; struct DtmRequestManager {} *x6; struct FreezeViewNode {} *x7; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_8_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_8_1_2; bool x_8_1_3; bool x_8_1_4; } x8; struct FrameLatLon { double x_9_1_1; double x_9_1_2; double x_9_1_3; double x_9_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_9_1_5; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_13_1_1; struct TileBound {} *x_13_1_2; struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_3_2_1; } x_13_1_3; } x13; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_14_1_1; struct SimpleTileKey {} *x_14_1_2; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_3_2_1; } x_14_1_3; } x14; bool x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; struct VKClassicGlobeCanvas { } *x20; bool x21; bool x22; int x23; struct AnimationManager { struct AnimationTimer { struct AnimationReferenceTimer {} *x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_24_1_1; double x_24_1_2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_2_1; struct AnimationObjectHolder {} *x_3_2_2; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; struct Timer { double x_25_1_1; } x25; double x26; bool x27; double x28; double x29; double x30; struct FrameLatLon { double x_31_1_1; double x_31_1_2; double x_31_1_3; double x_31_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_31_1_5; } x31; struct C3mmRequestManager {} *x32; struct RenderableGroup {} *x33; unsigned int x34; double x35; bool x36; bool x37; struct LabelDataManagerPrivate {} *x38; bool x39; bool x40; bool x41; bool x42; struct RouteLineManager {} *x43; struct GlobeCleanupLoader {} *x44; struct CompleteGlobeTileSetCullingGraph {} *x45; struct CompleteGlobeTileSetLoader {} *x46; struct TileSetNode {} *x47; struct GlobeTileRenderManager {} *x48; struct CullingNode {} *x49; struct EarthAdjustedViewNode {} *x50; struct UserViewNode {} *x51; struct View {} *x52; struct BasicViewNode {} *x53; struct GlobeMainViewNode {} *x54; struct C3bRequestManager {} *x55; float x56; bool x57; struct shared_ptr<bool> { bool *x_58_1_1; struct __shared_weak_count {} *x_58_1_2; } x58; struct HeightRequestManager {} *x59; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_60_1_1; } x60; struct Mutex { void *x_61_1_1; } x61; struct shared_ptr<altitude::Stylesheet> { struct Stylesheet {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct FlyoverTour {} *x63; bool x64; struct TriggerManager {} *x65; struct Viewport { int x_66_1_1; int x_66_1_2; int x_66_1_3; int x_66_1_4; } x66; struct AnimationReferenceTimer { double x_67_1_1; double x_67_1_2; double x_67_1_3; } x67; bool x68; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_node<altitude::ManifestListener *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x_3_3_1; } x_1_2_3; } x_69_1_1; } x69; struct GeoServicesLoader {} *x70; struct ManifestManager {} *x71; struct GlobeDispatch {} *x72; }*)globeView;
- (double)greatCircleMidPointLatitude:(double)arg1 deltaLongitude:(double)arg2;
- (double)heading;
- (id)init;
- (void)interruptFlyoverTourAnimation;
- (bool)isFlyoverTourStarted;
- (bool)isFullyPitched;
- (bool)isPitched;
- (id)mapRegion;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (void)moveTo:(struct { double x1; double x2; })arg1 height:(double)arg2 useHeight:(bool)arg3 zoom:(double)arg4 rotation:(double)arg5 tilt:(double)arg6 duration:(double)arg7 timingCurve:(id /* block */)arg8 completion:(id /* block */)arg9;
- (void)moveTo:(struct { double x1; double x2; })arg1 zoom:(double)arg2 rotation:(double)arg3 tilt:(double)arg4 duration:(double)arg5 timingCurve:(id /* block */)arg6 completion:(id /* block */)arg7;
- (void)moveToZoomOutZoomInTransition:(struct { double x1; double x2; })arg1 height:(double)arg2 useHeight:(bool)arg3 zoom:(double)arg4 rotation:(double)arg5 tilt:(double)arg6 duration:(double)arg7 timingCurve:(id /* block */)arg8 completion:(id /* block */)arg9;
- (void)panWithOffset:(struct CGPoint { double x1; double x2; })arg1 relativeToScreenPoint:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)pauseFlyoverTourAnimation;
- (double)pitch;
- (void)pitch:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (double)presentationYaw;
- (bool)restoreViewportFromInfo:(id)arg1;
- (void)resumeFlyoverTourAnimation;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)rotateTo:(double)arg1 animated:(bool)arg2;
- (void)setCenterCoordinate3D:(struct { double x1; double x2; double x3; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(id /* block */)arg7 completion:(id /* block */)arg8;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(id /* block */)arg7 completion:(id /* block */)arg8;
- (void)setCurrentZoomLevel:(double)arg1;
- (void)setFlyoverMode:(int)arg1;
- (void)setGesturing:(bool)arg1;
- (void)setGlobeView:(struct GlobeView { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Context {} *x4; struct DtmCacheNode {} *x5; struct DtmRequestManager {} *x6; struct FreezeViewNode {} *x7; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_8_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_8_1_2; bool x_8_1_3; bool x_8_1_4; } x8; struct FrameLatLon { double x_9_1_1; double x_9_1_2; double x_9_1_3; double x_9_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_9_1_5; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_13_1_1; struct TileBound {} *x_13_1_2; struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_3_2_1; } x_13_1_3; } x13; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_14_1_1; struct SimpleTileKey {} *x_14_1_2; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_3_2_1; } x_14_1_3; } x14; bool x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; struct VKClassicGlobeCanvas { } *x20; bool x21; bool x22; int x23; struct AnimationManager { struct AnimationTimer { struct AnimationReferenceTimer {} *x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_24_1_1; double x_24_1_2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_2_1; struct AnimationObjectHolder {} *x_3_2_2; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; struct Timer { double x_25_1_1; } x25; double x26; bool x27; double x28; double x29; double x30; struct FrameLatLon { double x_31_1_1; double x_31_1_2; double x_31_1_3; double x_31_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_31_1_5; } x31; struct C3mmRequestManager {} *x32; struct RenderableGroup {} *x33; unsigned int x34; double x35; bool x36; bool x37; struct LabelDataManagerPrivate {} *x38; bool x39; bool x40; bool x41; bool x42; struct RouteLineManager {} *x43; struct GlobeCleanupLoader {} *x44; struct CompleteGlobeTileSetCullingGraph {} *x45; struct CompleteGlobeTileSetLoader {} *x46; struct TileSetNode {} *x47; struct GlobeTileRenderManager {} *x48; struct CullingNode {} *x49; struct EarthAdjustedViewNode {} *x50; struct UserViewNode {} *x51; struct View {} *x52; struct BasicViewNode {} *x53; struct GlobeMainViewNode {} *x54; struct C3bRequestManager {} *x55; float x56; bool x57; struct shared_ptr<bool> { bool *x_58_1_1; struct __shared_weak_count {} *x_58_1_2; } x58; struct HeightRequestManager {} *x59; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_60_1_1; } x60; struct Mutex { void *x_61_1_1; } x61; struct shared_ptr<altitude::Stylesheet> { struct Stylesheet {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct FlyoverTour {} *x63; bool x64; struct TriggerManager {} *x65; struct Viewport { int x_66_1_1; int x_66_1_2; int x_66_1_3; int x_66_1_4; } x66; struct AnimationReferenceTimer { double x_67_1_1; double x_67_1_2; double x_67_1_3; } x67; bool x68; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_node<altitude::ManifestListener *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x_3_3_1; } x_1_2_3; } x_69_1_1; } x69; struct GeoServicesLoader {} *x70; struct ManifestManager {} *x71; struct GlobeDispatch {} *x72; }*)arg1;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id /* block */)arg5;
- (void)setMaxZoomLevel:(double)arg1;
- (void)setYaw:(double)arg1 animated:(bool)arg2;
- (float)slowDownFactorFromLoadProgress;
- (bool)snapMapIfNecessary:(bool)arg1;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(bool)arg2 animated:(bool)arg3;
- (void)stopFlyoverTourAnimation;
- (void)stopGlobeAnimations;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)tapZoom:(struct CGPoint { double x1; double x2; })arg1 levels:(double)arg2 completionHandler:(id /* block */)arg3;
- (long long)tileSize;
- (void)tiltTo:(double)arg1 animated:(bool)arg2 exaggerate:(bool)arg3;
- (double)topDownMinimumZoomLevel;
- (void)transitionToFlyoverMode:(int)arg1 animated:(bool)arg2;
- (void)updateCameraManager;
- (void)updateFlyoverMode;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updateState;
- (id)viewportInfo;
- (double)widestLatitudeForMapRegion:(id)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (double)zoomForMapRegion:(id)arg1;
- (void)zoomToDistance:(struct CGPoint { double x1; double x2; })arg1 distance:(double)arg2 time:(double)arg3;
- (void)zoomToDistance:(struct CGPoint { double x1; double x2; })arg1 distance:(double)arg2 time:(double)arg3 completionHandler:(id /* block */)arg4;

@end
