/* Generated by RuntimeBrowser.
 */

@protocol LabelManagerDelegate <NSObject>

@required

- (void)labelManager:(void *)arg1 pendingArtworkIsReady:(void *)arg2; // needs 2 arg types, found 173: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*, bool
- (void)labelManager:(void *)arg1 selectedLabelMarkerDidChangeState:(void *)arg2; // needs 2 arg types, found 173: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*, const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*
- (void)labelManager:(void *)arg1 selectedLabelMarkerWillDisappear:(void *)arg2; // needs 2 arg types, found 173: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*, const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*
- (void)labelManager:(void *)arg1 setNeedsDisplay:(void *)arg2; // needs 2 arg types, found 173: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*, bool
- (void)labelManager:(void *)arg1 setNeedsLayout:(void *)arg2; // needs 2 arg types, found 173: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*, bool
- (void)labelManagerDidLayout:(void *)arg1; // needs 1 arg types, found 172: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, id, id, unsigned char, long long, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<double, 3, 1> { double x1[3]; }, struct Matrix<float, 2, 1> { float x1[2]; }, float, double, double, double, double, double, double, float, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<double, 4, 4> { double x1[16]; }, struct Matrix<float, 2, 1> { float x1[2]; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, float, float, float, struct LabelAngle { unsigned char x1; }, struct Matrix<float, 2, 1> { float x1[2]; }, unsigned int, double, double, int, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct LabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; unsigned int x2; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct unordered_map<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_7_1_1; } x7; bool x8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_1_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_2_1; } x_9_1_3; } x9; unsigned long long x10; unsigned long long x11; }, struct LabelPool { unsigned long long x1; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; struct map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; unsigned long long x4; unsigned long long x5; struct LabelCustomFeatureSupport {} *x6; unsigned int x7; bool x8; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct CocoaTypesetter { int (**x1)(); struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_2_1_1; } x2; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_4_1_1; } x4; struct unordered_map<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>, std::__1::hash<const __CTFont *>, std::__1::equal_to<const __CTFont *>, std::__1::allocator<std::__1::pair<const __CTFont *const, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct __hash_table<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true>, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true>, std::__1::allocator<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::hash<const __CTFont *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CTFont *, std::__1::__hash_value_type<const __CTFont *, geo::_retain_ptr<const __CTFont *, geo::_retain_cf<const __CTFont *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> >, std::__1::equal_to<const __CTFont *>, true> > { float x_4_3_1; } x_1_2_4; } x_5_1_1; } x5; }, struct FontAtlas { int (**x1)(); int x2; struct vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_1_1; struct shared_ptr<md::FontAtlasPage> {} *x_3_1_2; struct __compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > > { struct shared_ptr<md::FontAtlasPage> {} *x_3_2_1; } x_3_1_3; } x3; struct FontAtlasCell {} *x4; struct FontAtlasCell {} *x5; int x6; struct CGColor {} *x7; struct CGContext {} *x8; void *x9; unsigned int x10; unsigned int x11; struct FontGlyphCache {} *x12; bool x13; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_14_1_1; struct vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_2_1; struct FontAtlasCell {} **x_2_2_2; struct __compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_3_1; } x_2_2_3; } x_14_1_2; } x14[3]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_15_1_1; struct shared_ptr<ggl::Texture2D> {} *x_15_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_2_1; } x_15_1_3; } x15; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; }, struct LabelMesh { int (**x1)(); struct vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_2_1_1; struct IconLabelPart {} **x_2_1_2; struct __compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> > { struct IconLabelPart {} **x_3_2_1; } x_2_1_3; } x2; struct vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_1_1; struct TextLabelPart {} **x_3_1_2; struct __compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; } x_3_1_3; } x3; struct vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_4_1_1; struct LabelExternalIcon {} **x_4_1_2; struct __compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> > { struct LabelExternalIcon {} **x_3_2_1; } x_4_1_3; } x4; struct FontAtlas {} *x5; bool x6; unsigned long long x7; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_1_1; struct BufferRange {} *x_8_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_8_1_3; } x8; struct vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_9_1_1; struct BufferRange {} *x_9_1_2; struct __compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_2_1; } x_9_1_3; } x9; struct Matrix<float, 4, 4> { float x_10_1_1[16]; } x10; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_11_1_1; struct shared_ptr<ggl::RenderItem> {} *x_11_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_2_1; } x_11_1_3; } x11; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_12_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_13_1_3; } x13; struct vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_1; struct shared_ptr<ggl::PipelineSetup> {} *x_14_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > > { struct shared_ptr<ggl::PipelineSetup> {} *x_3_2_1; } x_14_1_3; } x14; struct RenderState {} *x15; struct RenderState {} *x16; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_17_1_1; struct __shared_weak_count {} *x_17_1_2; } x17; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> > { struct ConstantDataTyped<ggl::Glyph::View> {} *x_18_1_1; struct __shared_weak_count {} *x_18_1_2; } x18; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; struct shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> > { struct ConstantDataTyped<ggl::Glyph::Channel> {} *x_20_1_1; struct __shared_weak_count {} *x_20_1_2; } x20; struct shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_21_1_1; struct __shared_weak_count {} *x_21_1_2; } x21; struct shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState> { struct DefaultPipelineState {} *x_22_1_1; struct __shared_weak_count {} *x_22_1_2; } x22; struct shared_ptr<ggl::Icon::IconPipelineState> { struct IconPipelineState {} *x_23_1_1; struct __shared_weak_count {} *x_23_1_2; } x23; struct DefaultMesh { int (**x_24_1_1)(); char *x_24_1_2; int (**x_24_1_3)(); struct ResourceManager {} *x_24_1_4; struct RenderResource {} *x_24_1_5; struct MeshCReflection {} *x_24_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_24_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_24_1_8; } x24; unsigned long long x25; struct shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> > { struct ConstantDataTyped<ggl::Icon::View> {} *x_26_1_1; struct __shared_weak_count {} *x_26_1_2; } x26; struct RenderState {} *x27; struct RenderState {} *x28; struct RenderState {} *x29; struct shared_ptr<ggl::IconShader> { struct IconShader {} *x_30_1_1; struct __shared_weak_count {} *x_30_1_2; } x30; struct IconMesh { int (**x_31_1_1)(); char *x_31_1_2; int (**x_31_1_3)(); struct ResourceManager {} *x_31_1_4; struct RenderResource {} *x_31_1_5; struct MeshCReflection {} *x_31_1_6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_2_1; struct shared_ptr<ggl::VertexData> {} *x_7_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_3_1; } x_7_2_3; } x_31_1_7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_2_1; struct __shared_weak_count {} *x_8_2_2; } x_31_1_8; } x31; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; unsigned long long x33; }, struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; float x2; bool x3; bool x4; unsigned char x5; unsigned char x6; struct DisplayStyle { unsigned char x_7_1_1; unsigned char x_7_1_2; unsigned char x_7_1_3; unsigned char x_7_1_4; unsigned char x_7_1_5; } x7; float x8; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_10_1_1; } x10; struct map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_11_1_1; } x11; struct shared_ptr<md::LabelStyle> { struct LabelStyle {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x_13_1_1; struct __shared_weak_count {} *x_13_1_2; } x13; struct shared_ptr<const md::GenericShieldStyleInfo> { struct GenericShieldStyleInfo {} *x_14_1_1; struct __shared_weak_count {} *x_14_1_2; } x14; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct LabelImageLoader { struct list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> > { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> { struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_1; struct __list_node_base<md::LabelImageLoader::CachedItem, void *> {} *x_1_2_2; } x_1_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > > { unsigned long long x_2_2_1; } x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct LabelManager {} *x3; struct set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > > { struct __tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> > { struct weak_interface_ptr<md::LabelImageLoader> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; id x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; }, struct LabelCollider { struct LabelManager {} *x1; unsigned int x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; float x4; float x5; struct Matrix<float, 2, 1> { float x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_8_1_1; struct GridNode {} *x_8_1_2; struct __compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> > { struct GridNode {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; bool x10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_2_1[2]; } x_11_1_1; struct Matrix<int, 2, 1> { int x_2_2_1[2]; } x_11_1_2; } x11; struct SimpleBuffer<md::LabelCollidableItem *, 20> { unsigned long long x_12_1_1; unsigned long long x_12_1_2; struct LabelCollidableItem {} **x_12_1_3; } x12; struct SimpleBuffer<md::LabelCollisionItemBase *, 2000> { unsigned long long x_13_1_1; unsigned long long x_13_1_2; struct LabelCollisionItemBase {} **x_13_1_3; } x13; }, struct OcclusionManager { struct shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> > { struct ConstantDataTyped<ggl::OcclusionLine::View> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct RenderState { int (**x_2_1_1)(); char *x_2_1_2; int (**x_2_1_3)(); struct ResourceManager {} *x_2_1_4; struct RenderResource {} *x_2_1_5; struct DepthState { int x_6_2_1; int x_6_2_2; int x_6_2_3; float x_6_2_4; float x_6_2_5; } x_2_1_6; struct StencilState { int x_7_2_1; int x_7_2_2; int x_7_2_3; int x_7_2_4; int x_7_2_5; unsigned int x_7_2_6; unsigned int x_7_2_7; unsigned int x_7_2_8; } x_2_1_7; struct RasterizerState { int x_8_2_1; int x_8_2_2; unsigned int x_8_2_3; struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_4_1[2]; } x_4_3_1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_4_1[2]; } x_4_3_2; } x_8_2_4; } x_2_1_8; bool x_2_1_9; } x2; struct unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct __compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> > { struct OcclusionLinePipelineSetup {} *x_1_2_1; } x_3_1_1; } x3; struct Matrix<double, 4, 4> { double x_4_1_1[16]; } x4; bool x5; struct deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_1_2_1; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_2; struct shared_ptr<md::OcclusionQuery> {} **x_1_2_3; struct __compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> > { struct shared_ptr<md::OcclusionQuery> {} **x_4_3_1; } x_1_2_4; } x_6_1_1; unsigned long long x_6_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > > { unsigned long long x_3_2_1; } x_6_1_3; } x6; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct LabelTransitSupport { struct LabelManager {} *x1; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }, struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, bool, bool, bool, bool, double, struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x1; struct shared_ptr<md::LabelExternalPointFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > > { struct shared_ptr<md::LabelExternalPointFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_2_1; } x_1_1_4; } x1; }, struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x1; struct shared_ptr<md::LabelExternalRoadFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > > { struct shared_ptr<md::LabelExternalRoadFeature> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x1; struct shared_ptr<md::LabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > > { struct shared_ptr<md::LabelFeature> {} *x_3_1_1; } x3; }, struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine {} *x1; struct __shared_weak_count {} *x2; }, unsigned int, struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }, void*, unsigned int, double, double, unsigned long long, bool, float, unsigned char, unsigned int, unsigned int, unsigned int, double, float, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; }, struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct LabelNavTrafficSupport { struct LabelManager {} *x1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_1_1)(); id x_2_1_2; void*x_2_1_3; const void*x_2_1_4; void*x_2_1_5; void*x_2_1_6; int x_2_1_7; in void*x_2_1_8; out unsigned int x_2_1_9/* : ? */; void*x_2_1_10; BOOL x_2_1_11; void*x_2_1_12; } x2; struct _release_objc { } x3; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct PolylineCoordinate { unsigned int x1; float x2; }, struct vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x1; struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > > { struct shared_ptr<md::TrafficIncidentLabelFeature> {} *x_3_1_1; } x3; }, bool, void*, struct LabelCustomFeatureSupport { int (**x1)(); struct LabelManager {} *x2; struct shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> > { struct weak_interface_ptr<md::LabelMapTileObserver> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > > { struct __tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; struct vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_5_1_1; struct LabelMapTile {} **x_5_1_2; struct __compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> > { struct LabelMapTile {} **x_3_2_1; } x_5_1_3; } x5; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_6_1_1; } x6; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_3_1; } x_1_2_4; } x_7_1_1; } x7; unsigned int x8; unsigned int x9; }, bool, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }, bool, void*

@end
