/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/GameplayKit.framework/GameplayKit
 */

@interface GKObstacleGraph : GKGraph {
    struct GKCObstacleGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; void x4; /* Warning: Unrecognized filer type: 'e' using 'void*' */ void*x5; BOOL x6; void*x7; out const void*x8; void*x9; void*x10; unsigned char x11; void*x12; out long x13; void*x14; void*x15; out in bycopy unsigned int x16/* : ? */; short x17; void*x18; void*x19; BOOL x20; long x21; void*x22; void*x23; char *x24; void*x25; void*x26; short x27; void*x28; double x29; SEL x30; SEL x31; void*x32; void*x33; void*x34; SEL x35; SEL x36; void*x37; long x38; long x39; out BOOL x40; void*x41; void*x42; out const void*x43; void*x44; void*x45; unsigned char x46; void*x47; out long x48; void*x49; void*x50; out in bycopy unsigned int x51/* : ? */; short x52; void*x53; void*x54; BOOL x55; long x56; void*x57; void*x58; char *x59; void*x60; void*x61; void*x62; void*x63; struct GKCPolygonObstacle {} **x64; struct GKCPolygonObstacle {} **x65; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle {} **x_66_1_1; } x66; } * _cObstacleGraph;
    Class  _nodeClass;
    NSMutableArray * _sourceObstacles;
}

@property (nonatomic, readonly) float bufferRadius;
@property (nonatomic, readonly) NSArray *obstacles;

+ (id)graphWithObstacles:(id)arg1 bufferRadius:(float)arg2;
+ (id)graphWithObstacles:(id)arg1 bufferRadius:(float)arg2 nodeClass:(Class)arg3;

- (void).cxx_destruct;
- (void)addObstacles:(id)arg1;
- (float)bufferRadius;
- (struct GKCObstacleGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; void x4; /* Warning: Unrecognized filer type: 'e' using 'void*' */ void*x5; BOOL x6; void*x7; out const void*x8; void*x9; void*x10; unsigned char x11; void*x12; out long x13; void*x14; void*x15; out in bycopy unsigned int x16/* : ? */; short x17; void*x18; void*x19; BOOL x20; long x21; void*x22; void*x23; char *x24; void*x25; void*x26; short x27; void*x28; double x29; SEL x30; SEL x31; void*x32; void*x33; void*x34; SEL x35; SEL x36; void*x37; long x38; long x39; out BOOL x40; void*x41; void*x42; out const void*x43; void*x44; void*x45; unsigned char x46; void*x47; out long x48; void*x49; void*x50; out in bycopy unsigned int x51/* : ? */; short x52; void*x53; void*x54; BOOL x55; long x56; void*x57; void*x58; char *x59; void*x60; void*x61; void*x62; void*x63; struct GKCPolygonObstacle {} **x64; struct GKCPolygonObstacle {} **x65; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle {} **x_66_1_1; } x66; }*)cObstacleGraph;
- (Class)classForGenericArgumentAtIndex:(unsigned long long)arg1;
- (void)connectNodeUsingObstacles:(id)arg1;
- (void)connectNodeUsingObstacles:(id)arg1 ignoringBufferRadiusOfObstacles:(id)arg2;
- (void)connectNodeUsingObstacles:(id)arg1 ignoringObstacles:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithObstacles:(id)arg1 bufferRadius:(float)arg2;
- (id)initWithObstacles:(id)arg1 bufferRadius:(float)arg2 nodeClass:(Class)arg3;
- (bool)isConnectionLockedFromNode:(id)arg1 toNode:(id)arg2;
- (void)lockConnectionFromNode:(id)arg1 toNode:(id)arg2;
- (struct GKCGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x4; void*x5; void*x6; void*x7; void*x8; id x9; void*x10; void*x11; const void*x12; out void*x13; void*x14; void*x15; void*x16; void*x17; const void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; union x25; void*x26; in void*x27; out void*x28; in void*x29; void*x30; void*x31; void*x32; void*x33; out void*x34; void*x35; void*x36; int x37; void*x38; BOOL x39; void*x40; void*x41; void*x42; void*x43; void*x44; const void*x45; void*x46; void*x47; void*x48; void*x49; double x50; void*x51; out void*x52; in void*x53; long x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; unsigned char x68; void*x69; void*x70; void*x71; void*x72; void*x73; unsigned char x74; void*x75; out void*x76; const void*x77; void*x78; void*x79; void*x80; void*x81; in void*x82; out void*x83; void*x84; void*x85; long x86; void*x87; void*x88; void*x89; double x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; unsigned char x100; void*x101; void*x102; void*x103; void*x104; void*x105; in void*x106; out void*x107; void*x108; void*x109; long x110; void*x111; void*x112; void*x113; double x114; void*x115; void*x116; void*x117; void*x118; void*x119; unsigned short x120; void*x121; void*x122; void*x123; out void*x124; const void*x125; void*x126; void*x127; void*x128; void*x129; char *x130; void*x131; short x132; void*x133; void*x134; void*x135; out void*x136; const void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; id x148; void*x149; long long x150; void*x151; void*x152; void*x153; void*x154; void*x155; int x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; const void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; const void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; long long x180; void*x181; void*x182; void*x183; void*x184; void*x185; char *x186; void*x187; long long x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; long long x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; long long x209; bool x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; struct  struct GKCGraphNode { {} x227; void*x228; char *x229; char *x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; short x240; void*x241; const void*x242; BOOL x243; void*x244; void*x245; void*x246; void*x247; unsigned char x248; void*x249; const void*x250; void*x251; void*x252; inout out double x253; void*x254; void*x255; struct  {} x256; void*x257; char *x258; char *x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; short x269; void*x270; const void*x271; BOOL x272; void*x273; void*x274; void*x275; void*x276; BOOL x277; out void*x278; void*x279; const void*x280; short x281; short x282; void*x283; double x284; void*x285; void*x286; void*x287; int x288; const void*x289; void*x290; void*x291; unsigned char x292; void*x293; const void*x294; void*x295; void*x296; inout out double x297; void*x298; void*x299; char *x300; char *x301; void*x302; void*x303; short x304; void*x305; double x306; SEL x307; SEL x308; void*x309; void*x310; void*x311; SEL x312; SEL x313; void*x314; long x315; long x316; out BOOL x317; void*x318; void*x319; out const void*x320; void*x321; void*x322; unsigned char x323; void*x324; const void*x325; void*x326; void*x327; inout out double x328; void*x329; void*x330; char *x331; void*x332; void*x333; void*x334; void*x335; struct  struct GKCGraphNode { {} x336; void*x337; char *x338; char *x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; }*)makeCGraph;
- (id)mutObstacles;
- (Class)nodeClass;
- (id)nodesForObstacle:(id)arg1;
- (id)obstacles;
- (void)removeAllObstacles;
- (void)removeObstacles:(id)arg1;
- (void)unlockConnectionFromNode:(id)arg1 toNode:(id)arg2;

@end
